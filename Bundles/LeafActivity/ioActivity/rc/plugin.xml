<plugin id="ioActivity" version="@PROJECT_VERSION@">

    <requirement id="io" />
    <requirement id="uiIO" />
    <requirement id="media" />
    <requirement id="filterVRRender" />
    <requirement id="activities" />

    <!-- Activity used to export an image series. -->
    <extension implements="::fwActivities::registry::Activities">
        <id>ImageSeriesExport</id>
        <title>ImageSeries Export</title>
        <desc>Activity to export the selected ImageSeries.</desc>
        <icon>media-0.1/icons/Export.svg</icon>
        <requirements>
            <requirement name="series" type="::fwMedData::ImageSeries" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>::fwActivities::builder::ActivitySeries</builder>
        <appConfig id="ExportSelection">
            <parameters>
                <parameter replace="selection" by="@values.series" />
            </parameters>
        </appConfig>
    </extension>

    <!-- Activity used to export a model series. -->
    <extension implements="::fwActivities::registry::Activities">
        <id>ModelSeriesExport</id>
        <title>ModelSeries Export</title>
        <desc>Activity to export the selected ModelSeries.</desc>
        <icon>media-0.1/icons/Export.svg</icon>
        <requirements>
            <requirement name="series" type="::fwMedData::ModelSeries" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>::fwActivities::builder::ActivitySeries</builder>
        <appConfig id="ExportSelection">
            <parameters>
                <parameter replace="selection" by="@values.series" />
            </parameters>
        </appConfig>
    </extension>

    <!-- Activity used to export a model series. -->
    <extension implements="::fwActivities::registry::Activities">
        <id>DicomSeriesExport</id>
        <title>DicomSeries Export</title>
        <desc>Activity to export an ImageSeries as a DICOM file, and optionally a ModelSeries.</desc>
        <icon>media-0.1/icons/Export.svg</icon>
        <requirements>
            <requirement name="imageSeries" type="::fwMedData::ImageSeries" minOccurs="1" maxOccurs="1" />
            <requirement name="modelSeries" type="::fwMedData::ModelSeries" minOccurs="0" maxOccurs="1" >
                <key>optionalModelKey</key>
            </requirement>
        </requirements>
        <builder>::fwActivities::builder::ActivitySeries</builder>
        <appConfig id="ExportDicomSelection">
            <parameters>
                <parameter replace="image" by="@values.imageSeries" />
                <parameter replace="optionalModel" by="@values.modelSeries" />
            </parameters>
        </appConfig>
    </extension>

    <!-- App config used to export the selected series. -->
    <extension implements="::fwServices::registry::AppConfig">
        <id>ExportSelection</id>
        <parameters>
            <param name="selection" />
        </parameters>
        <config>
            <object uid="${selection}" src="ref" />

            <service uid="export_selection" type="::uiIO::editor::SIOSelector" autoConnect="yes">
                <in key="selection" uid="${selection}" />
                <type mode="writer" />
                <selection mode="exclude" />
                <addSelection service="::ioAtoms::SWriter" />
            </service>
            <start uid="export_selection" />
            <update uid="export_selection" />
        </config>
    </extension>

    <!-- App config used to export a dicom selected series. -->
    <extension implements="::fwServices::registry::AppConfig">
        <id>ExportDicomSelection</id>
        <parameters>
            <param name="image" />
            <param name="optionalModel" />
        </parameters>
        <config>
            <object uid="${image}" type="::fwMedData::ImageSeries" src="ref" />
            <object uid="${optionalModel}" type="::fwData::Composite" src="ref" />
            <object uid="model" type="::fwMedData::ModelSeries" src="deferred" />

            <!-- We build a vector with the image and model series. -->
            <object uid="vectorToSave" type="::fwData::Vector" />

            <!-- This service extracts the model if it exists from the optional model parameter. -->
            <service uid="extractImage" type="::gui::action::SPushObject" >
                <inout key="source" uid="${optionalModel}" />
                <out key="destination" uid="model" />
                <push srcKey="optionalModelKey" />
            </service>

            <service uid="addImage" type="::ctrlSelection::SManage">
               <inout key="object" uid="${image}" />
               <inout key="vector" uid="vectorToSave" />
            </service>

            <service uid="addModel" type="::ctrlSelection::SManage">
               <inout key="object" uid="model" />
               <inout key="vector" uid="vectorToSave" />
            </service>

            <service uid="exportSelection" type="::uiIO::editor::SIOSelector">
                <in key="selection" uid="vectorToSave" />
                <type mode="writer" />
                <selection mode="include" />
                <addSelection service="::ioGdcm::SSeriesDBWriter" />
            </service>

            <connect>
                <signal>addImage/started</signal>
                <slot>addImage/add</slot>
            </connect>
            <connect>
                <signal>addModel/started</signal>
                <slot>addModel/add</slot>
            </connect>

            <start uid="extractImage" />
            <start uid="addImage" />
            <start uid="addModel" />
            <start uid="exportSelection" />

            <update uid="extractImage" />
            <update uid="exportSelection" />
        </config>
    </extension>

    <!-- Service config used to read SeriesDB without using ioAtoms. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>SDBReaderIOSelectorConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>IOSelectorService config for SeriesDB reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="exclude" />
            <addSelection service="::ioAtoms::SReader" />
        </config>
    </extension>

    <!-- Service config used to read seriesDB using ioAtoms. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>SDBAtomsReaderIOSelectorConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>Atoms seriesDB reader.</desc>
        <config>
            <type mode="reader" />
            <selection mode="include" />
            <addSelection service="::ioAtoms::SReader" />
            <config id="MDAtomsConfig" service="::ioAtoms::SReader" />
        </config>
    </extension>

    <!-- Service config used to write a seriesDB using ioAtoms. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>SDBAtomsWriterIOSelectorConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>Atoms seriesDB writer.</desc>
        <config>
            <type mode="writer" />
            <selection mode="include" />
            <addSelection service="::ioAtoms::SWriter" />
            <config id="MDAtomsConfig" service="::ioAtoms::SWriter" />
        </config>
    </extension>

    <!-- Service config used to read SeriesDB with all the available reader for SeriesDB. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>FullSDBReaderIOSelectorConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>IOSelectorService config for SeriesDB reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="exclude" />
            <config id="MDAtomsConfig" service="::ioAtoms::SReader" />
        </config>
    </extension>

    <!-- Service config used for ioAtoms reader and writer. Defines the Data version and filter to use. -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>MDAtomsConfig</id>
        <desc>Reader/Writer for atoms representing a medical data</desc>
        <config>
            <patcher context="MedicalData" version="V10" />
            <filter>VRRenderMedicalDataV2</filter>
        </config>
    </extension>

    <extension implements="::fwServices::registry::ServiceConfig">
        <id>ActivityMDAtomsConfig</id>
        <desc>Reader/Writer for atoms representing an activity project</desc>
        <config>
            <archive backend="jsonz">
                <extension>.apz</extension>
            </archive>
            <extensions>
                <extension label="Zipped Activity Project">.apz</extension>
            </extensions>
            <patcher context="MedicalData" version="V10" />
        </config>
    </extension>

    <extension implements="::fwServices::registry::ServiceConfig">
        <id>ActivityReaderConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>Activity reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="include" />
            <addSelection service="::ioAtoms::SReader" />
            <config id="ActivityMDAtomsConfig" service="::ioAtoms::SReader" />
        </config>
    </extension>

    <extension implements="::fwServices::registry::ServiceConfig">
        <id>ActivityWriterConfig</id>
        <service>::uiIO::editor::SIOSelector</service>
        <desc>Activity writer</desc>
        <config>
            <type mode="writer" />
            <selection mode="include" />
            <addSelection service="::ioAtoms::SWriter" />
            <config id="ActivityMDAtomsConfig" service="::ioAtoms::SWriter" />
        </config>
    </extension>

    <!-- Service config used for ioAtoms reader and writer to read landmarks -->
    <extension implements="::fwServices::registry::ServiceConfig">
        <id>LandmarksAtomsConfig</id>
        <desc>Reader/Writer for atoms representing a medical data</desc>
        <config>
            <patcher context="Landmark" version="V2" />
        </config>
    </extension>

</plugin>
