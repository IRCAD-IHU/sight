// Default material

//-----------------------------------------------------------------------------

// Edge
vertex_program Default_Edge_VP_glsl glsl
{
    source DefaultEdge_VP.glsl
    default_params
    {
        param_named_auto u_worldView worldview_matrix
        param_named_auto u_proj projection_matrix
        param_named_auto u_diffuse surface_diffuse_colour
    }
}

//-----------------------------------------------------------------------------

// Normal
vertex_program Default_Normal_VP_glsl glsl
{
    source NormalsDisplay_VP.glsl
}

//-----------------------------------------------------------------------------

geometry_program VerticesNormalsDisplay_GP glsl
{
    source NormalsDisplay_GP.glsl
    preprocessor_defines POINT=1
    default_params
    {
        param_named_auto u_worldViewProj worldviewproj_matrix
        param_named u_normalLength float 10.
        param_named u_normalColor float4 1. 0. 0. 1.
    }
}

//-----------------------------------------------------------------------------

geometry_program CellsNormalsDisplay_GP glsl
{
    source NormalsDisplay_GP.glsl
    preprocessor_defines CELL=1
    default_params
    {
        param_named_auto u_worldViewProj worldviewproj_matrix
        param_named u_normalLength float 10.
        param_named u_normalColor float4 1. 1. 0. 1.
    }
}

//-----------------------------------------------------------------------------

material "1 - Default"
{
    technique
    {
        pass
        {
            ambient 0.05 0.05 0.05
            specular 0.5 0.5 0.5 25.0

            scene_blend alpha_blend
            cull_hardware none
            cull_software none

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            fragment_program_ref Default_PixelLit_FP_glsl
            {
            }
        }
    }

    //-------------------------------------------------------------------------
    // Mip-mapping techiques (Farid)
    //-------------------------------------------------------------------------


    technique Mip_0
    {
        scheme Mip_0

        pass Mip_0
        {
            cull_hardware none
            cull_software none

            fragment_program_ref Mip_FP
            {
            }

            vertex_program_ref stdPos_VP
            {
            }
        }
    }

    technique Mip1_mat
    {
        scheme Mip1_mat

        pass Mip1_mat
        {
            cull_hardware none
            cull_software none

            fragment_program_ref Mip_FP_def
            {

            }

            vertex_program_ref stdPos_VP
            {
            }

            texture_unit Mip_prev
            {

            }
        }
    }

    //-------------------------------------------------------------------------
    // END Mip-mapping techiques (Farid)
    //-------------------------------------------------------------------------



    //-------------------------------------------------------------------------
    // Depth peeling
    //-------------------------------------------------------------------------

    technique DepthPeeling_depth_map
    {
        scheme DepthPeeling_depth_map

        pass DepthPeeling_depth_map
        {
            cull_hardware none
            cull_software none

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref DepthPeeling_depth_map_FP
            {
            }

            vertex_program_ref Render_VP
            {
            }
        }
    }

    technique DepthPeeling_peel_init
    {
        scheme DepthPeeling_peel_init

        pass peel_init
        {
            cull_hardware none
            cull_software none

            // Draw render depth + color
            fragment_program_ref DepthPeeling_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor DepthPeeling peel_init 0
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique DepthPeeling_peel
    {
        scheme DepthPeeling_peel_pong

        pass peel_pong
        {
            //depth_func less
            cull_hardware none
            cull_software none

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref DepthPeeling_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor DepthPeeling ping_buffer 1
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique DepthPeeling_peel
    {
        scheme DepthPeeling_peel_ping

        pass peel_ping
        {
            //depth_func less
            cull_hardware none
            cull_software none

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref DepthPeeling_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor DepthPeeling pong_buffer 1
                tex_address_mode clamp
                filtering none
            }
        }
    }

    //-------------------------------------------------------------------------
    // CelShading + Depth peeling
    //-------------------------------------------------------------------------

    technique CelShadingDepthPeeling_depth_map
    {
        scheme CelShadingDepthPeeling_depth_map

        pass CelShadingDepthPeeling_depth_map
        {
            cull_hardware none
            cull_software none

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref CelShadingDepthPeeling_depth_map_FP
            {
            }

            vertex_program_ref Render_VP
            {
            }
        }
    }

    technique CelShadingDepthPeeling_peel_init
    {
        scheme CelShadingDepthPeeling_peel_init

        pass peel_init
        {
            cull_hardware none
            cull_software none

            // Draw render depth + color
            fragment_program_ref CelShadingDepthPeeling_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref CelShadingDepthPeelingRenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor CelShadingDepthPeeling peel_init 0
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique CelShadingDepthPeeling_peel
    {
        scheme CelShadingDepthPeeling_peel_pong

        pass peel_pong
        {
            //depth_func less
            cull_hardware none
            cull_software none

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref CelShadingDepthPeeling_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref CelShadingDepthPeelingRenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor CelShadingDepthPeeling ping_buffer 1
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique CelShadingDepthPeeling_peel
    {
        scheme CelShadingDepthPeeling_peel_ping

        pass peel_ping
        {
            //depth_func less
            cull_hardware none
            cull_software none

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref CelShadingDepthPeeling_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref CelShadingDepthPeelingRenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor CelShadingDepthPeeling pong_buffer 1
                tex_address_mode clamp
                filtering none
            }
        }
    }

    //-------------------------------------------------------------------------
    // Dual Depth peeling
    //-------------------------------------------------------------------------

    technique DualDepthPeeling_peel_init
    {
        scheme DualDepthPeeling_peel_init

        pass peel_init
        {
            depth_check off
            cull_hardware none
            cull_software none
            scene_blend add
            scene_blend_op max

            // Draw render depth + color
            fragment_program_ref DualDepthPeeling_peel_init_FP_glsl
            {
            }

            vertex_program_ref Render_VP
            {
            }
        }
    }

    technique DualDepthPeeling_peel
    {
        scheme DualDepthPeeling_peel_pong

        pass
        {
            depth_check off
            cull_hardware none
            cull_software none
            scene_blend add
            scene_blend_op max

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref DualDepthPeeling_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor DualDepthPeeling ping_buffer 0
                tex_address_mode clamp
                filtering none
            }

            texture_unit
            {
                content_type compositor DualDepthPeeling ping_buffer 1
                tex_address_mode clamp
                filtering none
            }

            texture_unit
            {
                content_type compositor DualDepthPeeling ping_buffer 2
                tex_address_mode clamp
                filtering none
            }

            texture_unit
            {
                content_type compositor DualDepthPeeling ping_buffer 4
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique DualDepthPeeling_peel
    {
        scheme DualDepthPeeling_peel_ping

        pass
        {
            depth_check off
            cull_hardware none
            cull_software none
            scene_blend add
            scene_blend_op max

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref DualDepthPeeling_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor DualDepthPeeling pong_buffer 0
                tex_address_mode clamp
                filtering none
            }

            texture_unit
            {
                content_type compositor DualDepthPeeling pong_buffer 1
                tex_address_mode clamp
                filtering none
            }

            texture_unit
            {
                content_type compositor DualDepthPeeling pong_buffer 2
                tex_address_mode clamp
                filtering none
            }

            texture_unit
            {
                content_type compositor DualDepthPeeling pong_buffer 4
                tex_address_mode clamp
                filtering none
            }
        }
    }

    //-------------------------------------------------------------------------
    // Hybrid Transparency
    //-------------------------------------------------------------------------

    technique HybridTransparency_back_depth
    {
        scheme HybridTransparency_back_depth

        pass back_depth
        {
            depth_func greater_equal
            cull_hardware none
            cull_software none

            fragment_program_ref DepthPeeling_depth_map_FP
            {
            }

            vertex_program_ref Render_VP
            {
            }
        }
    }

    technique HybridTransparency_peel_init
    {
        scheme HybridTransparency_peel_init

        pass peel_init
        {
            cull_hardware none
            cull_software none

            // Draw render depth + color
            fragment_program_ref HybridTransparency_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor HybridTransparency peel_init 0
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique HybridTransparency_peel
    {
        scheme HybridTransparency_peel_pong

        pass
        {
            cull_hardware none
            cull_software none

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref HybridTransparency_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor HybridTransparency ping_buffer 1
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique HybridTransparency_peel
    {
        scheme HybridTransparency_peel_ping

        pass
        {
            cull_hardware none
            cull_software none

            // Check previous FBO's buffers and write depth + color in another FBO's buffers
            fragment_program_ref HybridTransparency_peel_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor HybridTransparency pong_buffer 1
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique HybridTransparency_occlusion_map
    {
        scheme HybridTransparency_occlusion_map

        pass occlusion_map
        {
            cull_hardware none
            cull_software none

            fragment_program_ref HybridTransparency_occlusion_map_FP
            {
            }

            vertex_program_ref Render_VP
            {
            }
        }
    }

    technique HybridTransparency_weight_blend
    {
        scheme HybridTransparency_weight_blend

        pass blend
        {
            depth_check off
            cull_hardware none
            cull_software none
            scene_blend add

            fragment_program_ref HybridTransparency_weight_blend_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor HybridTransparency ping_buffer 1
                tex_address_mode clamp
                filtering none
            }

            texture_unit
            {
                content_type compositor HybridTransparency occlusion 0
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique HybridTransparency_transmittance_blend
    {
        scheme HybridTransparency_transmittance_blend

        pass blend
        {
            depth_check off
            cull_hardware none
            cull_software none
            scene_blend zero one_minus_src_colour

            fragment_program_ref HybridTransparency_transmittance_blend_FP
            {
            }

            vertex_program_ref Render_VP
            {
            }

            texture_unit
            {
                content_type compositor HybridTransparency ping_buffer 1
                tex_address_mode clamp
                filtering none
            }

            texture_unit
            {
                content_type compositor HybridTransparency occlusion 0
                tex_address_mode clamp
                filtering none
            }
        }
    }

    //-------------------------------------------------------------------------
    // Weighted Blended Average OIT
    //-------------------------------------------------------------------------

    technique WeightedBlended_occlusion_map
    {
        scheme WeightedBlended_occlusion_map

        pass occlusion_map
        {
            cull_hardware none
            cull_software none

            fragment_program_ref WeightedBlended_occlusion_map_FP
            {
            }

            vertex_program_ref Render_VP
            {
            }
        }
    }

    technique WeightedBlended_weight_blend
    {
        scheme WeightedBlended_weight_blend

        pass blend
        {
            depth_check off
            cull_hardware none
            cull_software none
            scene_blend add

            fragment_program_ref WeightedBlended_weight_blend_PixelLit_FP_glsl
            {
            }

            vertex_program_ref RenderScene_PixelLit_VP_glsl
            {
            }

            texture_unit
            {
                content_type compositor WeightedBlended occlusion 0
                tex_address_mode clamp
                filtering none
            }
        }
    }

    technique WeightedBlended_transmittance_blend
    {
        scheme WeightedBlended_transmittance_blend

        pass blend
        {
            depth_check off
            cull_hardware none
            cull_software none
            scene_blend zero one_minus_src_colour

            fragment_program_ref WeightedBlended_transmittance_blend_FP
            {
            }

            vertex_program_ref Render_VP
            {
            }

            texture_unit
            {
                content_type compositor WeightedBlended occlusion 0
                tex_address_mode clamp
                filtering none
            }
        }
    }
}
