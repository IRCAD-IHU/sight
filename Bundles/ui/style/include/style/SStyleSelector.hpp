/************************************************************************
 *
 * Copyright (C) 2020 IRCAD France
 * Copyright (C) 2020 IHU Strasbourg
 *
 * This file is part of Sight.
 *
 * Sight is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Sight is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Sight. If not, see <https://www.gnu.org/licenses/>.
 *
 ***********************************************************************/

#pragma once

#include "style/config.hpp"

#include <fwServices/IController.hpp>

#include <QString>

#include <filesystem>

namespace style
{
/**
 * @brief Selector of theme/style
 * Theme should be stored in the rc/ folder of this bundle.
 *
 * @section Slots Slots
   - \b setEnumParameter(std::string value, std::string key): Changes the current theme (key "theme").
 * theme names are generated by parsing the *.rcc (from *.qrc files) and then name are uppercased (ex: flatdark.rcc
 * becames FLATDARK).
 *
 * @section XML XML Configuration
 *
 * @code{.xml}
        <service type="::style::SStyleSelector" />
   @endcode
 */
class STYLE_CLASS_API SStyleSelector : public ::fwServices::IController
{
public:

    fwCoreServiceMacro(SStyleSelector, ::fwServices::IController)

    /// Constructor, initializes position map & slots.
    STYLE_API SStyleSelector() noexcept;

    /// Destructor, clears the position map.
    STYLE_API virtual ~SStyleSelector() noexcept override;

protected:

    /** @name Service methods ( override from ::fwServices::IService )
     * @{
     */

    /// This method configures the service
    STYLE_API virtual void configuring() override;

    /**
     * @brief Starts and setups the service by parsing rc folder to find availble themes.
     */
    STYLE_API virtual void starting() override;

    /**
     * @brief Does nothing
     */
    STYLE_API virtual void stopping() override;

    /**
     * @brief Does nothing.
     */
    STYLE_API virtual void updating() override;

private:

    void changeStyle(const std::string& _styleName);

    /// Slot: This method is used to set an enum parameter.
    void setEnumParameter(std::string _val, std::string _key);

    /// Map to stores theme names and their path.
    std::map< std::string, std::filesystem::path > m_styleMap;

};

} //namespace style
