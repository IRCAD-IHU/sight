<plugin id="ExRGBDImageMasking" version="@PROJECT_VERSION@">
    <requirement id="dataReg" />
    <requirement id="arDataReg" />
    <requirement id="servicesReg" />
    <requirement id="visuOgreQt" />
    <extension implements="::fwServices::registry::AppConfig">
        <id>ExRGBDImageMasking</id>
        <config>
            <!-- objects declarations -->
            <object uid="frameTLVideo" type="::arData::FrameTL" />
            <object uid="frameTLDepth" type="::arData::FrameTL" />
            <object uid="videoImage" type="::fwData::Image" />
            <object uid="depthImage" type="::fwData::Image" />
            <object uid="RGBDCameraSeries" type="::arData::CameraSeries" />
            <object uid="RGBcamera" type="::arData::Camera" src="deferred" />
            <object uid="Dcamera" type="::arData::Camera" src="deferred" />
            <object uid="identity" type="::fwData::TransformationMatrix3D" />
            <object uid="extrinsic" type="::fwData::TransformationMatrix3D" src="deferred" />

            <!-- declaration of the views, menu and toolbar -->
            <service uid="mainFrame" type="::gui::frame::SDefaultFrame">
                <gui>
                    <frame>
                        <name>ExRGBDImageMasking</name>
                        <icon>ExRGBDImageMasking-0.1/app.ico</icon>
                    </frame>
                    <toolBar/>
                </gui>
                <registry>
                    <toolBar sid="toolbar" start="yes" />
                    <view sid="mainView" start="yes" />
                </registry>
            </service>

            <service uid="mainView" type="::gui::view::SDefaultView">
                <gui>
                    <layout type="::fwGui::LineLayoutManager">
                        <orientation value="vertical" />
                        <view proportion="1" />
                    </layout>
                </gui>
                <registry>
                    <view sid="genericScene" />
                </registry>
            </service>

            <service uid="toolbar" type="::gui::aspect::SDefaultToolBar">
                <gui>
                    <layout>
                        <editor />
                        <menuItem name="start" icon="media-0.1/icons/start-cam.svg" />
                        <menuItem name="stop" icon="media-0.1/icons/stop-cam.svg" />
                        <menuItem name="pause" icon="media-0.1/icons/pause-cam.svg" />
                    </layout>
                </gui>
                <registry>
                    <editor sid="cameraSelector" start="yes" />
                    <menuItem sid="startVideo" start="yes" />
                    <menuItem sid="stopVideo" start="yes" />
                    <menuItem sid="pauseVideo" start="yes" />
                </registry>
            </service>

            <service uid="cameraSelector" type="::videoQt::editor::SCamera">
                <inout key="cameraSeries" uid="RGBDCameraSeries" />
                <createCameraNumber>2</createCameraNumber>
                <videoSupport>yes</videoSupport>
            </service>

            <service uid="startVideo" type="::gui::action::SSlotCaller">
                <slots>
                    <slot>startVideo/setInexecutable</slot>
                    <slot>frameGrabber/startCamera</slot>
                    <slot>stopVideo/setExecutable</slot>
                </slots>
            </service>

            <service uid="stopVideo" type="::gui::action::SSlotCaller">
                <slots>
                    <slot>stopVideo/setInexecutable</slot>
                    <slot>frameGrabber/stopCamera</slot>
                    <slot>startVideo/setExecutable</slot>
                </slots>
            </service>

            <service uid="pauseVideo" type="::gui::action::SSlotCaller">
                <slots>
                    <slot>frameGrabber/pauseCamera</slot>
                </slots>
            </service>

            <!-- Scene in which the video and the 3D will be rendered -->
            <!-- *************************** Begin generic scene *************************** -->

            <service uid="genericScene" type="::fwRenderOgre::SRender" >
                <scene>
                    <layer id="video" depth="1" />
                    <layer id="default" depth="2" />
                    <adaptor uid="videoAdpt" />
                    <adaptor uid="cameraAdpt" />
                </scene>
            </service>

            <service uid="videoAdpt" type="::visuOgreAdaptor::SVideo" autoConnect="yes">
                <in key="image" uid="videoImage" />
                <config layer="video" />
            </service>

            <service uid="cameraAdpt" type="::visuOgreAdaptor::SCamera">
                <inout key="transform" uid="identity" />
                <in key="calibration" uid="RGBcamera" />
                <config layer="default" />
            </service>

            <!-- *************************** End generic scene *************************** -->

            <!-- extract RGB instrinsic Depth intrinsic and Extrinsic matrices from a::arData::CameraSeries -->
            <service uid="extractor" type="::ctrlCamp::SExtractObj">
                <inout key="source" uid="RGBDCameraSeries" autoConnect="yes">
                    <extract from="@cameras.0" /> <!-- Camp path of the first camera in cameraSeries (Depth) -->
                    <extract from="@cameras.1" /> <!-- Camp path of the second camera in cameraSeries (RGB) -->
                    <extract from="@extrinsic_matrices.1" /> <!-- Camp path of the extrincis matrix in cameraSeries going from Depth to RGB coordinate system -->
                </inout>
                <!-- destination -->
                <out group="target">
                    <key uid="Dcamera" />
                    <key uid="RGBcamera" />
                    <key uid="extrinsic" />
                </out>
            </service>

            <service uid="frameGrabber" type="::videoRealSense::SScan" worker="grabber">
                <inout key="cameraSeries" uid="RGBDCameraSeries" />
                <inout key="depthTL" uid="frameTLDepth" />
                <inout key="frameTL" uid="frameTLVideo" />
                <config fps="30" colorW="1280" colorH="720" depthW="1280" depthH="720" switchToIR="false" IREmitter="true" preset="Hand" />
            </service>

            <!-- To synchronize matrix, frame and detection -->
            <service uid="synchronizer" type="::videoTools::SFrameMatrixSynchronizer" worker="videoWorker">
                <in group="frameTL">
                    <key uid="frameTLVideo" />
                    <key uid="frameTLDepth" />
                </in>
                <inout group="image">
                    <key uid="videoImage" />
                    <key uid="depthImage" />
                </inout>
            </service>

            <!-- start services -->
            <start uid="mainFrame" />
            <start uid="synchronizer" />
            <start uid="frameGrabber" />
            <start uid="extractor" />
            <start uid="genericScene" />
            <!-- VTK scene 'genericScene' -->
            <start uid="videoAdpt" />
            <start uid="cameraAdpt" />
        </config>
    </extension>
</plugin>
