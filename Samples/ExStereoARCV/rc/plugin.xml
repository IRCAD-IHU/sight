<plugin id="ExStereoARCV" version="@PROJECT_VERSION@">
    <requirement id="dataReg" />
    <requirement id="arDataReg" />
    <requirement id="servicesReg" />
    <requirement id="visuVTKQt" />
    <requirement id="preferences" />
    <extension implements="::fwServices::registry::AppConfig">
        <id>ExStereoARCVConfig</id>
        <config>
            <!-- objects declarations -->
            <object uid="cameraSeries" type="::arData::CameraSeries" />
            <object uid="camera1" type="::arData::Camera" src="deferred" />
            <object uid="camera2" type="::arData::Camera" src="deferred" />
            <object uid="frameTL1" type="::arData::FrameTL" />
            <object uid="frameTL2" type="::arData::FrameTL" />
            <object uid="tagTL1" type="::arData::MarkerTL" />
            <object uid="tagTL2" type="::arData::MarkerTL" />
            <object uid="videoImage1" type="::fwData::Image" />
            <object uid="videoImage2" type="::fwData::Image" />
            <object uid="matrixTL" type="::arData::MatrixTL" />
            <object uid="matrix" type="::fwData::TransformationMatrix3D" />
            <object uid="extrinsic" type="::fwData::TransformationMatrix3D" src="deferred" />
            <object uid="inverseMat" type="::fwData::TransformationMatrix3D" />
            <object uid="rightMat" type="::fwData::TransformationMatrix3D" />
            <!-- declaration of the views, menu and toolbar -->
            <service uid="mainFrame" type="::gui::frame::SDefaultFrame">
                <gui>
                    <frame>
                        <name>ExStereoARCV</name>
                        <icon>ExStereoARCV-0.1/app.ico</icon>
                    </frame>
                    <menuBar/>
                    <toolBar/>
                </gui>
                <registry>
                    <menuBar sid="menuBar" start="yes" />
                    <toolBar sid="toolbar" start="yes" />
                    <view sid="cameraView" start="yes" />
                </registry>
            </service>

            <service uid="menuBar" type="::gui::aspect::SDefaultMenuBar">
                <gui>
                    <layout>
                        <menu name="File" />
                        <menu name="Preferences" />
                    </layout>
                </gui>
                <registry>
                    <menu sid="menuFile" start="yes" />
                    <menu sid="menuPreferences" start="yes" />
                </registry>
            </service>

            <service uid="menuFile" type="::gui::aspect::SDefaultMenu">
                <gui>
                    <layout>
                        <menuItem name="Show Settings" shortcut="Ctrl+H" style="check" />
                        <menuItem name="Quit" specialAction="QUIT" shortcut="Ctrl+Q" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="actionHide" start="yes" />
                    <menuItem sid="actionQuit" start="yes" />
                </registry>
            </service>

            <service uid="menuPreferences" type="::gui::aspect::SDefaultMenu">
                <gui>
                    <layout>
                        <menuItem name="Video directory" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="actionVideoDir" start="yes" />
                </registry>
            </service>

            <service uid="toolbar" type="::gui::aspect::SDefaultToolBar">
                <gui>
                    <layout>
                        <menuItem name="Load Calibration" icon="media-0.1/icons/Plus.svg" />
                        <editor/>
                        <editor/>
                        <menuItem name="start" icon="arMedia-0.1/icons/start-cam.svg" />
                        <menuItem name="stop" icon="arMedia-0.1/icons/stop-cam.svg" />
                        <menuItem name="pause" icon="arMedia-0.1/icons/pause-cam.svg" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="loadCalib" start="yes" />
                    <editor sid="CameraSelector1" />
                    <editor sid="CameraSelector2" />
                    <menuItem sid="startVideo" start="yes" />
                    <menuItem sid="stopVideo" start="yes" />
                    <menuItem sid="pauseVideo" start="yes" />
                </registry>
            </service>

            <service uid="cameraView" type="::gui::view::SDefaultView">
                <gui>
                    <layout type="::fwGui::LineLayoutManager">
                        <orientation value="horizontal" />
                        <view proportion="1" />
                        <view proportion="0" />
                    </layout>
                </gui>
                <registry>
                    <view sid="videoView" start="yes" />
                    <view sid="parameters" start="yes" />
                </registry>
            </service>

            <service uid="parameters" type="::gui::view::SDefaultView">
                <gui>
                    <layout type="::fwGui::LineLayoutManager">
                        <orientation value="vertical" />
                        <view proportion="3" caption="aruco" />
                        <view proportion="2" caption="reprojection" />
                        <spacer/>
                    </layout>
                </gui>
                <registry>
                    <view sid="arucoParams" start="yes" />
                    <view sid="reprojectionParams" start="yes" />
                </registry>
            </service>

            <service uid="videoView" type="::gui::view::SDefaultView">
                <gui>
                    <layout type="::fwGui::LineLayoutManager">
                        <orientation value="vertical" />
                        <view proportion="3" />
                        <view proportion="0" />
                        <view proportion="0" />
                    </layout>
                </gui>
                <registry>
                    <view sid="stereoView" start="yes" />
                    <view sid="errorLabelLeft" start="yes" />
                    <view sid="errorLabelRight" start="yes" />
                </registry>
            </service>

            <service uid="stereoView" type="::gui::view::SDefaultView">
                <gui>
                    <layout type="::fwGui::LineLayoutManager">
                        <orientation value="horizontal" />
                        <view proportion="0" />
                        <view proportion="0" />
                    </layout>
                </gui>
                <registry>
                    <view sid="genericSceneLeft" />
                    <view sid="genericSceneRight" />
                </registry>
            </service>

            <!-- declaration of actions/slot callers -->
            <service uid="actionQuit" type="::gui::action::SQuit" />
            <service uid="actionHide" type="::gui::action::SModifyLayout">
                <config>
                    <show_or_hide sid="parameters" />
                </config>
            </service>

            <service uid="loadCalib" type="::gui::action::SSlotCaller">
                <slots>
                    <slot>CalibrationReader/update</slot>
                </slots>
            </service>

            <service uid="startVideo" type="::gui::action::SSlotCaller">
                <slots>
                    <slot>frameGrabber1/startCamera</slot>
                    <slot>frameGrabber2/startCamera</slot>
                </slots>
            </service>

            <service uid="stopVideo" type="::gui::action::SSlotCaller">
                <slots>
                    <slot>frameGrabber1/stopCamera</slot>
                    <slot>frameGrabber2/stopCamera</slot>
                </slots>
            </service>

            <service uid="pauseVideo" type="::gui::action::SSlotCaller">
                <slots>
                    <slot>frameGrabber1/pauseCamera</slot>
                    <slot>frameGrabber2/pauseCamera</slot>
                </slots>
            </service>

            <!-- hide axis adaptor until a marker is found -->
            <service uid="hideAxis" type="::gui::action::SBooleanSlotCaller" >
                <slots>
                    <slot>axisLeft/updateVisibility</slot>
                    <slot>axisRight/updateVisibility</slot>
                </slots>
            </service>

            <!-- Calibration reader (here OpenCV's XML/YAML) -->
            <service uid="CalibrationReader" type="::ioCalibration::SOpenCVReader">
                <inout key="data" uid="cameraSeries" />
            </service>

            <!-- preference save the video directory and re-open the same directory at next launch of the app -->
            <service uid="actionVideoDir" type="::uiPreferences::action::SPreferencesConfiguration">
                <preference>
                    <type>path</type>
                    <name>Video directory</name>
                    <key>VIDEO_DIR_PREF</key>
                    <default_value>...</default_value>
                </preference>
            </service>

            <!-- extract a ::arData::Camera from the ::arData::CameraSeries -->
            <service uid="Extractor" type="::ctrlCamp::SExtractObj">
                <inout key="source" uid="cameraSeries">
                    <extract from="@cameras.0" />
                    <extract from="@cameras.1" />
                    <extract from="@extrinsic_matrices.1" />
                </inout>
                <out group="target">
                    <key uid="camera1" />
                    <key uid="camera2" />
                    <key uid="extrinsic" />
                </out>
            </service>

            <!-- Scene in which the video and the 3D will be rendered -->
            <!-- *************************** Begin generic scene *************************** -->

            <service uid="genericSceneLeft" type="::fwRenderVTK::SRender" autoConnect="yes">
                <scene>
                    <renderer id="video" layer="0" background="0.0" />
                    <renderer id="default" layer="1" background="0.0" />
                    <adaptor uid="videoLeft" />
                    <adaptor uid="interactorStyleLeft" />
                    <adaptor uid="axisLeft" />
                    <adaptor uid="cameraLeft" />
                </scene>
            </service>

            <service uid="videoLeft" type="::visuVTKARAdaptor::SVideo" autoConnect="yes">
                <in key="frame" uid="videoImage1" />
                <config renderer="video" />
            </service>

            <service uid="interactorStyleLeft" type="::visuVTKAdaptor::SInteractorStyle">
                <config renderer="default" style="FixedInteractorStyle" />
            </service>

            <service uid="axisLeft" type="::visuVTKAdaptor::SAxis">
                <config renderer="default" transform="id" autoresetcamera="no" length="30" />
            </service>

            <service uid="cameraLeft" type="::visuVTKARAdaptor::SCamera" autoConnect="yes">
                <inout key="transform" uid="inverseMat" />
                <in key="camera" uid="camera1" />
                <config renderer="default" />
            </service>

            <!-- *************************** End generic scene *************************** -->

            <!-- Scene in which the video and the 3D will be rendered -->
            <!-- *************************** Begin generic scene *************************** -->

            <service uid="genericSceneRight" type="::fwRenderVTK::SRender" autoConnect="yes">
                <scene>
                    <renderer id="video" layer="0" background="0.0" />
                    <renderer id="default" layer="1" background="0.0" />
                    <adaptor uid="videoRight" />
                    <adaptor uid="interactorStyleRight" />
                    <adaptor uid="axisRight" />
                    <adaptor uid="cameraRight" />
                </scene>
            </service>

            <service uid="videoRight" type="::visuVTKARAdaptor::SVideo" autoConnect="yes">
                <in key="frame" uid="videoImage2" />
                <config renderer="video" />
            </service>

            <service uid="interactorStyleRight" type="::visuVTKAdaptor::SInteractorStyle">
                <config renderer="default" style="FixedInteractorStyle" />
            </service>

            <service uid="axisRight" type="::visuVTKAdaptor::SAxis">
                <config renderer="default" transform="id" autoresetcamera="no" length="30" />
            </service>

            <service uid="cameraRight" type="::visuVTKARAdaptor::SCamera" autoConnect="yes">
                <inout key="transform" uid="rightMat" />
                <in key="camera" uid="camera2" />
                <config renderer="default" />
            </service>

            <!-- *************************** End generic scene *************************** -->

            <!-- GUI to handle aruco tracking parameters -->
            <service uid="arucoParams" type="::guiQt::editor::SParameters">
                <parameters>
                    <!-- show marker or not -->
                    <param type="bool" name="Show Marker" key="debugMode" defaultValue="true" />
                    <!--  do corner refinement or not. -->
                    <param type="bool" name="Corner refinement." key="corner" defaultValue="true" />
                    <!-- minimum window size for adaptive thresholding before finding contours -->
                    <param type="int" name="adpt. Threshold win size min" key="adaptiveThreshWinSizeMin" defaultValue="3" min="1" max="100" />
                    <!-- maximum window size for adaptive thresholding before finding contours -->
                    <param type="int" name="adpt. Threshold win size max" key="adaptiveThreshWinSizeMax" defaultValue="23" min="1" max="100" />
                    <!-- increments from adaptiveThreshWinSizeMin to adaptiveThreshWinSizeMax during the thresholding -->
                    <param type="int" name="adpt. Threshold win size step" key="adaptiveThreshWinSizeStep" defaultValue="10" min="1" max="100" />
                    <!-- constant for adaptive thresholding before finding contours -->
                    <param type="double" name="adpt. threshold constant" key="adaptiveThreshConstant" defaultValue="7." min="0." max="30." />
                    <!-- determine minimum perimeter for marker contour to be detected.
                        This is defined as a rate respect to the maximum dimension of the input image -->
                    <param type="double" name="Min. Marker Perimeter Rate" key="minMarkerPerimeterRate" defaultValue="0.03" min="0.01" max="1.0" />
                    <!-- determine maximum perimeter for marker contour to be detected.
                        This is defined as a rate respect to the maximum dimension of the input image -->
                    <param type="double" name="Max. Marker Perimeter Rate" key="maxMarkerPerimeterRate" defaultValue="4.0" min="1." max="10." />
                    <!-- minimum accuracy during the polygonal approximation process to determine which contours are squares -->
                    <param type="double" name="Polygonal Approx. Accuracy Rate" key="polygonalApproxAccuracyRate" defaultValue="0.03" min="0.01" max="1." />
                    <!-- minimum distance between corners for detected markers relative to its perimeter -->
                    <param type="double" name="Min. Corner Distance Rate" key="minCornerDistanceRate" defaultValue="0.01" min="0." max="1." />
                    <!-- minimum distance of any corner to the image border for detected markers (in pixels) -->
                    <param type="int" name="Min. Distance to Border" key="minDistanceToBorder" defaultValue="1" min="0" max="10" />
                    <!-- minimum mean distance beetween two marker corners to be considered similar,
                    so that the smaller one is removed. The rate is relative to the smaller perimeter of the two markers -->
                    <param type="double" name="Min. Marker Distance Rate" key="minMarkerDistanceRate" defaultValue="0.01" min="0." max="1." />
                    <!-- window size for the corner refinement process (in pixels) -->
                    <param type="int" name="Corner Refinement Win. Size" key="cornerRefinementWinSize" defaultValue="5" min="1" max="100" />
                    <!-- maximum number of iterations for stop criteria of the corner refinement process -->
                    <param type="int" name="Corner Refinement Max Iterations" key="cornerRefinementMaxIterations" defaultValue="30" min="0" max="10" />
                    <!-- minimum error for the stop cristeria of the corner refinement process -->
                    <param type="double" name="Corner Refinement Min. Accuracy" key="cornerRefinementMinAccuracy" defaultValue="0.1" min="0." max="10." />
                    <!-- number of bits of the marker border, i.e. marker border width -->
                    <param type="int" name="Marker Border Bits" key="markerBorderBits" defaultValue="1" min="1" max="100" />
                    <!-- number of bits (per dimension) for each cell of the marker when removing the perspective -->
                    <param type="int" name="Perspective Remove Pixel per Cell" key="perspectiveRemovePixelPerCell" defaultValue="8" min="1" max="32" />
                    <!-- width of the margin of pixels on each cell not considered for the determination of the cell bit.
                        Represents the rate respect to the total size of the cell,
                        i.e. perpectiveRemovePixelPerCel -->
                    <param type="double" name="Perspective Remove Ignored Margin Per Cell" key="perspectiveRemoveIgnoredMarginPerCell" defaultValue="0.13" min="0." max="1." />
                    <!-- maximum number of accepted erroneous bits in the border (i.e. number of allowed white bits in the border).
                        Represented as a rate respect to the total number of bits per marker -->
                    <param type="double" name="Max. Erroneous Bits In Border Rate" key="maxErroneousBitsInBorderRate" defaultValue="0.35" min="0." max="1." />
                    <!-- minimun standard deviation in pixels values during the decodification step to apply Otsu thresholding
                        (otherwise, all the bits are set to 0 or 1 depending on mean higher than 128 or not) -->
                    <param type="double" name="Min. Otsu Std. Dev." key="minOtsuStdDev" defaultValue="5.0" min="0." max="100." />
                    <!-- error correction rate respect to the maximun error correction capability for each dictionary -->
                    <param type="double" name="Error Correction Rate" key="errorCorrectionRate" defaultValue="0.6" min="0." max="1." />
                </parameters>
            </service>

            <service uid="reprojectionParams" type="::guiQt::editor::SParameters">
                <parameters>
                    <param type="bool" name="Show reprojection" key="display" defaultValue="true" />
                    <param type="color" name="Circle color" key="color" defaultValue="#00ff00" />
                </parameters>
            </service>

            <!-- Gui Service to display a value in a QLabel -->
            <service uid="errorLabelLeft" type="::uiTools::editor::STextStatus">
                <label>Reprojection Error Left (RMSE)</label>
            </service>

            <service uid="errorLabelRight" type="::uiTools::editor::STextStatus">
                <label>Reprojection Error Right (RMSE)</label>
            </service>

            <!-- GUI to select camera (device, file, or stream) -->
            <service uid="CameraSelector1" type="::videoQt::editor::SCamera">
                <inout key="camera" uid="camera1" />
                <videoSupport>yes</videoSupport>
            </service>

            <service uid="CameraSelector2" type="::videoQt::editor::SCamera">
                <inout key="camera" uid="camera2" />
                <videoSupport>yes</videoSupport>
            </service>

            <!-- Grab image from camera device and fill a frame timeline -->
            <service uid="frameGrabber1" type="::videoQt::SFrameGrabber">
                <in key="camera" uid="camera1" />
                <inout key="frameTL" uid="frameTL1" />
            </service>

            <service uid="frameGrabber2" type="::videoQt::SFrameGrabber">
                <in key="camera" uid="camera2" />
                <inout key="frameTL" uid="frameTL2" />
            </service>

            <!-- Aruco tracker service -->
            <service uid="tracker1" type="::trackerAruco::SArucoTracker" worker="tracking1">
                <in key="timeline" uid="frameTL1" autoConnect="yes" />
                <in key="camera" uid="camera1" />
                <inout group="tagTL">
                    <!-- timeline of detected tag(s) -->
                    <key uid="tagTL1" />
                </inout>
                <track>
                    <!-- list of id -->
                    <marker id="101" />
                </track>
                <debugMarkers>yes</debugMarkers>
            </service>

            <service uid="tracker2" type="::trackerAruco::SArucoTracker" worker="tracking2">
                <in key="timeline" uid="frameTL2" autoConnect="yes" />
                <in key="camera" uid="camera2" />
                <inout group="tagTL">
                    <!-- timeline of detected tag(s) -->
                    <key uid="tagTL2" />
                </inout>
                <track>
                    <!-- list of id -->
                    <marker id="101" />
                </track>
                <debugMarkers>yes</debugMarkers>
            </service>

            <!-- This will compute the pose of the camera with tag(s) detected by aruco -->
            <service uid="registration" type="::registrationCV::SPoseFrom2d" worker="registration">
                <in group="markerTL" autoConnect="yes">
                    <key uid="tagTL1" />
                    <key uid="tagTL2" />
                </in>
                <in group="camera">
                    <key uid="camera1" />
                    <key uid="camera2" />
                </in>
                <in key="extrinsic" uid="extrinsic" />
                <inout key="matrixTL" uid="matrixTL" />
                <patternWidth>60</patternWidth>
            </service>


            <!-- This will compute the reprojection error Left -->
            <service uid="reprojectionErrorLeft" type="::videoCalibration::SReprojectionError" worker="error1">
                <in key="matrixTL" uid="matrixTL" autoConnect="yes" />
                <in key="camera" uid="camera1" />
                <in key="markerTL" uid="tagTL1" />
                <inout key="frameTL" uid="frameTL1" />
                <patternWidth>60</patternWidth>
            </service>

            <service uid="reprojectionErrorRight" type="::videoCalibration::SReprojectionError" worker="error2">
                <in key="matrixTL" uid="matrixTL" autoConnect="yes" />
                <in key="extrinsic" uid="extrinsic" />
                <in key="camera" uid="camera2" />
                <in key="markerTL" uid="tagTL2" />
                <inout key="frameTL" uid="frameTL2" />
                <patternWidth>60</patternWidth>
            </service>


            <!-- To synchronize matrix, frame and detection -->
            <service uid="synchronizer" type="::videoTools::SFrameMatrixSynchronizer" worker="videoWorker">
                <in group="frameTL">
                    <key uid="frameTL1" />
                    <key uid="frameTL2" />
                </in>
                <inout group="image">
                    <key uid="videoImage1" />
                    <key uid="videoImage2" />
                </inout>
                <in group="matrixTL">
                    <key uid="matrixTL" />
                </in>
                <inout group="matrices0">
                    <key uid="matrix" />
                </inout>
                <framerate>30</framerate>
                <tolerance>100</tolerance>
            </service>

            <!-- to multiply matrices (here only used to inverse "matrix" )-->
            <service uid="matrixReverser" type="::maths::SConcatenateMatrices">
                <in group="matrix">
                    <key uid="matrix" autoConnect="yes" inverse="true" />
                </in>
                <inout key="output" uid="inverseMat" />
            </service>

            <!-- to multiply matrices -->
            <service uid="concatenate" type="::maths::SConcatenateMatrices">
                <in group="matrix">
                    <key uid="inverseMat" autoConnect="yes" inverse="false" />
                    <key uid="extrinsic" inverse="true"/>
                </in>
                <inout key="output" uid="rightMat" />
            </service>

            <!-- signal/slot connection -->
            <connect>
                <signal>reprojectionParams/colorChanged</signal>
                <slot>reprojectionErrorLeft/setColorParameter</slot>
                <slot>reprojectionErrorRight/setColorParameter</slot>
            </connect>

            <connect>
                <signal>reprojectionParams/boolChanged</signal>
                <slot>reprojectionErrorLeft/setBoolParameter</slot>
                <slot>reprojectionErrorRight/setBoolParameter</slot>
            </connect>

            <connect>
                <signal>reprojectionErrorLeft/errorComputed</signal>
                <slot>errorLabelLeft/setDoubleParameter</slot>
            </connect>

            <connect>
                <signal>reprojectionErrorRight/errorComputed</signal>
                 <slot>errorLabelRight/setDoubleParameter</slot>
            </connect>

            <connect>
                <signal>arucoParams/boolChanged</signal>
                <slot>tracker1/setBoolParameter</slot>
                <slot>tracker2/setBoolParameter</slot>
            </connect>

            <connect>
                <signal>arucoParams/intChanged</signal>
                <slot>tracker1/setIntParameter</slot>
                <slot>tracker2/setIntParameter</slot>
            </connect>

            <connect>
                <signal>arucoParams/doubleChanged</signal>
                <slot>tracker1/setDoubleParameter</slot>
                <slot>tracker2/setDoubleParameter</slot>
            </connect>

            <connect>
                <signal>cameraSeries/addedCamera</signal>
                <slot>Extractor/update</slot>
            </connect>

            <connect>
                <signal>camera1/idModified</signal>
                <slot>frameGrabber1/stopCamera</slot>
                <slot>frameGrabber2/stopCamera</slot>
            </connect>

            <connect>
                <signal>camera2/idModified</signal>
                <slot>frameGrabber1/stopCamera</slot>
                <slot>frameGrabber2/stopCamera</slot>
            </connect>

            <!-- start services -->
            <connect>
                <signal>tracker1/markerDetected</signal>
                <slot>axisLeft/updateVisibility</slot>
            </connect>

            <connect>
                <signal>tracker2/markerDetected</signal>
                <slot>axisRight/updateVisibility</slot>
            </connect>

            <start uid="mainFrame" />
            <start uid="CalibrationReader" />
            <start uid="Extractor" />
            <start uid="CameraSelector1" />
            <start uid="CameraSelector2" />
            <start uid="frameGrabber1" />
            <start uid="frameGrabber2" />
            <start uid="synchronizer" />
            <start uid="tracker1" />
            <start uid="tracker2" />
            <start uid="registration" />
            <start uid="reprojectionErrorLeft" />
            <start uid="reprojectionErrorRight" />

            <start uid="matrixReverser" />
            <start uid="concatenate" />
            <start uid="hideAxis" />

            <start uid="genericSceneLeft" />
            <start uid="genericSceneRight" />
            <!-- VTK scene 'genericSceneLeft' -->
            <start uid="videoLeft" />
            <start uid="interactorStyleLeft" />
            <start uid="axisLeft" />
            <start uid="cameraLeft" />
            <!-- VTK scene 'genericSceneRight' -->
            <start uid="videoRight" />
            <start uid="interactorStyleRight" />
            <start uid="axisRight" />
            <start uid="cameraRight" />

            <update uid="actionHide" />
            <update uid="hideAxis" />
        </config>
    </extension>
</plugin>
