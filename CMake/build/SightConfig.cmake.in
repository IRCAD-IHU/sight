set(FW_BUILD_EXTERNAL 1)

include("${CMAKE_CURRENT_LIST_DIR}/SightRequirements.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/macros.cmake")

set(_SUPPORTED_COMPONENTS @FW_COMPONENTS@)

set(EXTERNAL_LIBRARIES CACHE PATH "External libraries location (if not at a default location like /usr on Linux)")

if(EXTERNAL_LIBRARIES)
    list(APPEND CMAKE_PREFIX_PATH ${EXTERNAL_LIBRARIES})
    list(APPEND CMAKE_MODULE_PATH ${EXTERNAL_LIBRARIES})
    list(APPEND CMAKE_FIND_ROOT_PATH ${EXTERNAL_LIBRARIES})
    include(${EXTERNAL_LIBRARIES}/lib/cmake/BinPkgsConfig.cmake)
    include(${EXTERNAL_LIBRARIES}/lib/cmake/find_sse.cmake)

    # I think all these files should go away soon...
    file(GLOB LIB_CONFIGS ${EXTERNAL_LIBRARIES}/fw-*.cmake )
    foreach(LIB_CONFIG ${LIB_CONFIGS})
        if(NOT ${LIB_CONFIG}_FOUND)
            message(STATUS "include: ${LIB_CONFIG}")
            include("${LIB_CONFIG}")
            set(${LIB_CONFIG}_FOUND 1)
        endif()
    endforeach()
endif()

set(FWBUNDLE_LIB_PREFIX @FWBUNDLE_LIB_PREFIX@)
set(FWBUNDLE_RC_PREFIX @FWBUNDLE_RC_PREFIX@)

file(TO_CMAKE_PATH "${Sight_DIR}/../../../bin" Sight_BINARY_DIR)
file(TO_CMAKE_PATH "${Sight_DIR}/../../../${FWBUNDLE_LIB_PREFIX}" Sight_LIBRARY_DIR)
file(TO_CMAKE_PATH "${Sight_DIR}/../../../${FWBUNDLE_RC_PREFIX}" Sight_BUNDLES_DIR)
file(TO_CMAKE_PATH "${Sight_DIR}/../../../" Sight_DEFINE_DIR)

foreach(_comp ${Sight_FIND_COMPONENTS})
    if(NOT ${_comp}_FOUND)
        message(STATUS "Looking for Sight component: ${_comp}")
        if (NOT ";${_SUPPORTED_COMPONENTS};" MATCHES ${_comp})
            set(Sight_FOUND False)
            set(Sight_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
        endif()
        if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/Sight-${_comp}Dependencies.cmake")
        include("${CMAKE_CURRENT_LIST_DIR}/Sight-${_comp}Dependencies.cmake")
        endif()

        include("${CMAKE_CURRENT_LIST_DIR}/Sight-${_comp}Targets.cmake")

        # For now I do not know how to unroll this loop when configuring the file... so for now just use the default log level
        set_property( TARGET Sight::${_comp} PROPERTY INTERFACE_COMPILE_DEFINITIONS SPYLOG_LEVEL=2 SIGHT_DIR="${Sight_DEFINE_DIR}")
        set(${_comp}_FOUND 1)
    endif()
endforeach()

set(SPYLOG_LEVEL "error" CACHE STRING "Log level")
set(SPYLOG_LEVEL_VALUES "fatal;error;warning;info;debug;trace" CACHE INTERNAL
    "List of possible values for log level")
set(SPYLOG_LEVEL_MAP_fatal 1)
set(SPYLOG_LEVEL_MAP_error 2)
set(SPYLOG_LEVEL_MAP_warning 3)
set(SPYLOG_LEVEL_MAP_info 4)
set(SPYLOG_LEVEL_MAP_debug 5)
set(SPYLOG_LEVEL_MAP_trace 6)
set_property(CACHE SPYLOG_LEVEL PROPERTY STRINGS ${SPYLOG_LEVEL_VALUES} )
