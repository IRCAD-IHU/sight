# Use new policy to use CMAKE_CXX_STANDARD in try_compile() macro
cmake_policy(SET CMP0067 NEW)

set(FW_BUILD_EXTERNAL 1)

include("${CMAKE_CURRENT_LIST_DIR}/SightRequirements.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/macros.cmake")

# Needed for FindFilesystem.cmake
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

set(_SUPPORTED_COMPONENTS @FW_COMPONENTS@)

if(NOT VCPKG_TARGET_TRIPLET)
    string(TOLOWER ${PRJ_NAME} APP_NAME)
    configure_file(${FWCMAKE_RESOURCE_PATH}/install/linux/template.sh.in ${CMAKE_CURRENT_BINARY_DIR}/${APP_NAME} @ONLY)
endif()

setExternalLibrariesDir()

set(SIGHT_MODULE_LIB_PREFIX @SIGHT_MODULE_LIB_PREFIX@)
set(SIGHT_MODULE_RC_PREFIX @SIGHT_MODULE_RC_PREFIX@)

# For backward compatibility with Sight < 20.0
set(FWBUNDLE_LIB_PREFIX @SIGHT_MODULE_LIB_PREFIX@)
set(FWBUNDLE_RC_PREFIX @SIGHT_MODULE_RC_PREFIX@)

file(TO_CMAKE_PATH "${Sight_DIR}/../../../bin" Sight_BINARY_DIR)
file(TO_CMAKE_PATH "${Sight_DIR}/../../../${SIGHT_MODULE_LIB_PREFIX}" Sight_LIBRARY_DIR)
file(TO_CMAKE_PATH "${Sight_DIR}/../../../${SIGHT_MODULE_RC_PREFIX}" Sight_MODULES_DIR)
file(TO_CMAKE_PATH "${Sight_DIR}/../../../" Sight_DEFINE_DIR)

foreach(_comp ${Sight_FIND_COMPONENTS})
    if(NOT ${_comp}_FOUND)
        message(STATUS "Looking for Sight component: ${_comp}")
        if (NOT ";${_SUPPORTED_COMPONENTS};" MATCHES ${_comp})
            set(Sight_FOUND False)
            set(Sight_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
        endif()
        if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/Sight-${_comp}Dependencies.cmake")
            include("${CMAKE_CURRENT_LIST_DIR}/Sight-${_comp}Dependencies.cmake")
        endif()

        include("${CMAKE_CURRENT_LIST_DIR}/Sight-${_comp}Targets.cmake")

        # For now I do not know how to unroll this loop when configuring the file... so for now just use the default log level
        set_property( TARGET Sight::${_comp} PROPERTY INTERFACE_COMPILE_DEFINITIONS SPYLOG_LEVEL=2 SIGHT_DIR="${Sight_DEFINE_DIR}")
        set(${_comp}_FOUND 1)
    endif()
endforeach()

set(SPYLOG_LEVEL "error" CACHE STRING "Log level")
set(SPYLOG_LEVEL_VALUES "fatal;error;warning;info;debug;trace" CACHE INTERNAL
    "List of possible values for log level")
set(SPYLOG_LEVEL_MAP_fatal 1)
set(SPYLOG_LEVEL_MAP_error 2)
set(SPYLOG_LEVEL_MAP_warning 3)
set(SPYLOG_LEVEL_MAP_info 4)
set(SPYLOG_LEVEL_MAP_debug 5)
set(SPYLOG_LEVEL_MAP_trace 6)
set_property(CACHE SPYLOG_LEVEL PROPERTY STRINGS ${SPYLOG_LEVEL_VALUES} )

