<plugin id="ExRGBDImageMasking" version="@PROJECT_VERSION@" >

    <requirement id="guiQt" />
    <requirement id="servicesReg" />
    <requirement id="visuOgre" />
    <requirement id="visuOgreQt" />
    <requirement id="material" />
    <requirement id="preferences" />

    <extension implements="::fwServices::registry::AppConfig" >
        <id>ExRGBDImageMasking_AppCfg</id>
        <config>

            <!-- ******************************* Objects declaration ****************************** -->

            <!-- Frames timelines to manage video and depth streams  -->
            <object uid="frameTLVideo" type="::arData::FrameTL" />
            <object uid="frameTLDepth" type="::arData::FrameTL" />
            <!-- Images extracted from the TL and used to perform image masking -->
            <object uid="videoImage" type="::fwData::Image" />
            <object uid="depthImage" type="::fwData::Image" />
            <object uid="foregroundImage" type="::fwData::Image" />
            <object uid="offscreenImage" type="::fwData::Image" />
            <!-- Objects related to the camera managing the calibration data -->
            <object uid="RGBDCameraSeries" type="::arData::CameraSeries" />
            <object uid="RGBcamera" type="::arData::Camera" src="deferred" />
            <object uid="Dcamera" type="::arData::Camera" src="deferred" />
            <!-- Matrices to register to mesh in the right space regading the camera position -->
            <object uid="registrationMatrix" type="::fwData::TransformationMatrix3D" />
            <object uid="inverseMatrix" type="::fwData::TransformationMatrix3D" />
            <object uid="extrinsic" type="::fwData::TransformationMatrix3D" src="deferred" />
            <!-- Objectes related to the models loaded to perform AR -->
            <object uid="seriesDB" type="::fwMedData::SeriesDB" />
            <object uid="modelSeries" type="::fwMedData::ModelSeries" src="deferred" />
            <object uid="mesh" type="::fwData::Mesh" src="deferred" />

            <!-- ******************************* UI declaration *********************************** -->

            <!-- declaration of the views, menu and toolbar -->
            <service uid="mainFrame" type="::gui::frame::SDefaultFrame" >
                <gui>
                    <frame>
                        <name>ExRGBDImageMasking</name>
                        <icon>ExRGBDImageMasking-@PROJECT_VERSION@/app.ico</icon>
                    </frame>
                    <menuBar/>
                    <toolBar/>
                </gui>
                <registry>
                    <menuBar sid="menuBarView" start="yes" />
                    <toolBar sid="toolbarView" start="yes" />
                    <view sid="mainView" start="yes" />
                </registry>
            </service>

            <service uid="menuBarView" type="::gui::aspect::SDefaultMenuBar" >
                <gui>
                    <layout>
                        <menu name="File" />
                    </layout>
                </gui>
                <registry>
                    <menu sid="menuView" start="yes" />
                </registry>
            </service>

            <service uid="menuView" type="::gui::aspect::SDefaultMenu" >
                <gui>
                    <layout>
                        <menuItem name="Load transformation" shortcut="Ctrl+T" />
                        <separator/>
                        <menuItem name="Load mesh" shortcut="Ctrl+M" />
                        <separator/>
                        <menuItem name="Quit" specialAction="QUIT" shortcut="Ctrl+Q" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="loadTransformationAct" start="yes" />
                    <menuItem sid="loadMeshAct" start="yes" />
                    <menuItem sid="quitAct" start="yes" />
                </registry>
            </service>

            <service uid="toolbarView" type="::gui::aspect::SDefaultToolBar" >
                <gui>
                    <layout>
                        <editor />
                        <menuItem name="Start" icon="flatIcon-0.1/icons/GreenStart.svg" shortcut="Space" />
                        <menuItem name="Pause" icon="flatIcon-0.1/icons/OrangePause.svg" shortcut="Space" />
                        <menuItem name="Play" icon="flatIcon-0.1/icons/GreenStart.svg" shortcut="Space" />
                        <menuItem name="Stop" icon="flatIcon-0.1/icons/RedStop.svg" />
                        <menuItem name="Loop" icon="flatIcon-0.1/icons/OrangeLoop.svg" style="check" />
                        <separator/>
                        <menuItem name="Learn background" icon="flatIcon-0.1/icons/Background.svg" />
                        <separator/>
                        <menuItem name="Manage organs" icon="flatIcon-0.1/icons/Stomach.svg" style="check" />
                        <spacer/>
                        <menuItem name="Settings" icon="flatIcon-0.1/icons/BlueParameters.svg" style="check" />
                    </layout>
                </gui>
                <registry>
                    <editor sid="videoSelectorSrv" start="yes" />
                    <menuItem sid="startVideoAct" start="yes" />
                    <menuItem sid="pauseVideoAct" start="yes" />
                    <menuItem sid="resumeVideoAct" start="yes" />
                    <menuItem sid="stopVideoAct" start="yes" />
                    <menuItem sid="loopVideoAct" start="yes" />
                    <menuItem sid="learnBackgroundAct" start="yes" />
                    <menuItem sid="organManagerAct" start="no" />
                    <menuItem sid="showSettingsAct" start="yes" />
                </registry>
            </service>

            <service uid="mainView" type="::gui::view::SDefaultView" >
                <gui>
                    <layout type="::fwGui::LineLayoutManager" >
                        <orientation value="vertical" />
                        <view proportion="0" backgroundColor="#36393E" visible="false" />
                        <view proportion="1" />
                    </layout>
                </gui>
                <registry>
                    <view sid="settingsView" start="yes" />
                    <view sid="genericSceneSrv" />
                </registry>
            </service>

            <service uid="settingsView" type="::gui::view::SDefaultView" >
                <gui>
                    <layout type="::fwGui::LineLayoutManager" >
                        <orientation value="horizontal" />
                        <view proportion="0" />
                        <view proportion="0" />
                        <spacer />
                    </layout>
                </gui>
                <registry>
                    <view sid="enableHoleFillingFilterParamSrv" start="yes" />
                    <view sid="maskerThresholdParamSrv" start="yes" />
                </registry>
            </service>

            <!-- ************************************* Action ************************************ -->

            <!-- declaration of actions/slot callers -->
            <service uid="quitAct" type="::gui::action::SQuit" />

            <service uid="loadTransformationAct" type="::gui::action::SSlotCaller" >
                <slots>
                    <slot>transformReaderSrv/update</slot>
                </slots>
            </service>

            <service uid="loadMeshAct" type="::gui::action::SSlotCaller" >
                <slots>
                    <slot>meshReaderSrv/update</slot>
                </slots>
            </service>

            <!-- Start the frame grabber -->
            <service uid="startVideoAct" type="::gui::action::SSlotCaller" >
                <slots>
                    <slot>videoGrabberSrv/startCamera</slot>
                </slots>
                <state executable="false" />
            </service>

            <!-- Pause the frame grabber -->
            <service uid="pauseVideoAct" type="::gui::action::SSlotCaller" >
                <slots>
                    <slot>videoGrabberSrv/pauseCamera</slot>
                    <slot>resumeVideoAct/show</slot>
                    <slot>pauseVideoAct/hide</slot>
                </slots>
                <state visible="false" />
            </service>

            <!-- Resume the frame grabber -->
            <service uid="resumeVideoAct" type="::gui::action::SSlotCaller" >
                <slots>
                    <slot>videoGrabberSrv/pauseCamera</slot>
                    <slot>resumeVideoAct/hide</slot>
                    <slot>pauseVideoAct/show</slot>
                </slots>
                <state visible="false" />
            </service>

            <!-- Stop the frame grabber -->
            <service uid="stopVideoAct" type="::gui::action::SSlotCaller" >
                <slots>
                    <slot>videoGrabberSrv/stopCamera</slot>
                    <slot>startVideoAct/show</slot>
                    <slot>resumeVideoAct/hide</slot>
                    <slot>pauseVideoAct/hide</slot>
                    <slot>stopVideoAct/setInexecutable</slot>
                    <slot>loopVideoAct/setInexecutable</slot>
                    <slot>loopVideoAct/deactivate</slot>
                </slots>
                <state executable="false" />
            </service>

            <!-- Loop the frame grabber -->
            <service uid="loopVideoAct" type="::gui::action::SSlotCaller" >
                <slots>
                    <slot>videoGrabberSrv/loopVideo</slot>
                </slots>
                <state executable="false" />
            </service>

            <service uid="learnBackgroundAct" type="::gui::action::SSlotCaller" >
                <slots>
                    <slot>maskerSrv/setBackground</slot>
                </slots>
            </service>

            <service uid="organManagerAct" type="::gui::action::SConfigLauncher" >
                <appConfig id="ModelSeriesManagerWindow" />
                <inout key="ORGAN_MANAGER_MODELSERIES" uid="modelSeries" />
                <parameter replace="ICON_PATH" by="ExRGBDImageMasking-0.1/app.ico" />
            </service>

            <service uid="showSettingsAct" type="::gui::action::SBooleanSlotCaller" >
                <slots>
                    <slot>settingsView/setVisible</slot>
                </slots>
            </service>

            <!-- ******************************* Begin Generic Scene ******************************* -->

            <service uid="genericSceneSrv" type="::fwRenderOgre::SRender" >
                <scene>
                    <background topColor="#36393E" bottomColor="#36393E" />

                    <layer id="video" order="1" />
                    <adaptor uid="videoAdp" />

                    <layer id="default" order="2" />
                    <adaptor uid="meshAdp" />
                    <adaptor uid="cameraAdp" />

                    <layer id="ar" order="3" />
                    <adaptor uid="videoARAdp" />
                </scene>
            </service>

            <service uid="videoAdp" type="::visuOgreAdaptor::SVideo" autoConnect="yes" >
                <in key="image" uid="videoImage" />
                <config layer="video" />
            </service>

            <service uid="cameraAdp" type="::visuOgreAdaptor::SCamera" >
                <inout key="transform" uid="inverseMatrix" autoConnect="yes" />
                <in key="calibration" uid="RGBcamera" />
                <config layer="default" />
            </service>

            <service uid="meshAdp" type="::visuOgreAdaptor::SModelSeries" autoConnect="yes" >
                <in key="model" uid="modelSeries" />
                <config layer="default" transform="id" autoresetcamera="no" />
            </service>

            <service uid="videoARAdp" type="::visuOgreAdaptor::SVideo" autoConnect="yes" >
                <in key="image" uid="foregroundImage" />
                <config layer="ar" />
            </service>

            <!-- ******************************* Begin Generic Scene ******************************* -->

            <!-- Scene in which skin mesh will be render and fill a binary image to perform image masking -->
            <service uid="offscreenSceneSrv" type="::fwRenderOgre::SRender" >
                <inout key="offScreen" uid="offscreenImage" />
                <scene width="1280" height="720" >
                    <background topColor="#36393E" bottomColor="#36393E" />

                    <layer id="default" order="1" />
                    <adaptor uid="cameraOffscreenAdp" />
                    <adaptor uid="meshOffscreenAdp" />
                </scene>
            </service>

            <service uid="cameraOffscreenAdp" type="::visuOgreAdaptor::SCamera" autoConnect="yes" >
                <inout key="transform" uid="inverseMatrix" autoConnect="yes" />
                <in key="calibration" uid="RGBcamera" />
                <config layer="default" />
            </service>

            <service uid="meshOffscreenAdp" type="::visuOgreAdaptor::SMesh" autoConnect="yes" >
                <inout key="mesh" uid="mesh" shadingMode="ambient" />
                <config layer="default" transform="id" autoresetcamera="no" />
            </service>

            <!-- ******************************* Services ***************************************** -->

            <!-- Parameter to enable/disable hole filling from the RealSense grabber -->
            <service uid="enableHoleFillingFilterParamSrv" type="::guiQt::editor::SParameters" >
                <parameters>
                    <param type="bool" name="Enable holes Filling filter" key="enableHolesFilling" defaultValue="true" />
                </parameters>
            </service>

            <!-- Parameter to tune the threshold value from the SRGBDImageMasking service -->
            <service uid="maskerThresholdParamSrv" type="::guiQt::editor::SParameters" >
                <parameters>
                    <param type="int" name="Masking threshold" key="threshold" defaultValue="10" min="0" max="50" />
                </parameters>
            </service>

            <service uid="videoSelectorSrv" type="::videoQt::editor::SCamera" >
                <inout key="cameraSeries" uid="RGBDCameraSeries" />
                <createCameraNumber>2</createCameraNumber>
                <videoSupport>yes</videoSupport>
            </service>

            <!-- To get frames from the RealSense camera -->
            <service uid="videoGrabberSrv" type="::videoRealSense::SScan" worker="grabber" >
                <inout key="cameraSeries" uid="RGBDCameraSeries" />
                <inout key="depthTL" uid="frameTLDepth" />
                <inout key="frameTL" uid="frameTLVideo" />
                <config fps="30" colorW="1280" colorH="720" depthW="1280" depthH="720" preset="Hand" alignTo="Color" />
            </service>

            <!-- To synchronize matrix, frame and detection -->
            <service uid="frameUpdaterSrv" type="::videoTools::SFrameMatrixSynchronizer" worker="videoWorker" >
                <in group="frameTL" >
                    <key uid="frameTLVideo" />
                    <key uid="frameTLDepth" />
                </in>
                <inout group="image" >
                    <key uid="videoImage" />
                    <key uid="depthImage" />
                </inout>
            </service>

            <!-- Matrix (trf format) reader -->
            <!-- This matrix is used to staticaly register the model onto the video -->
            <service uid="transformReaderSrv" type="::uiIO::editor::SIOSelector" >
                <inout key="data" uid="registrationMatrix" />
                <type mode="reader" /> <!-- mode is optional (by default it is "reader") -->
                <selection mode="include" />
                <addSelection service="::ioData::TransformationMatrix3DReaderService" />
            </service>

            <!-- Reader to open seriesDB data (.jsonz format) -->
            <service uid="meshReaderSrv" type="::uiIO::editor::SIOSelector" >
                <inout key="data" uid="seriesDB" />
            </service>

            <!-- Extract the modelSeries from the loaded seriesDB -->
            <service uid="extractModelSeriesSrv" type="::ctrlCamp::SExtractObj" >
                <inout key="source" uid="seriesDB" >
                    <extract from="@values.0" />
                </inout>
                <out group="target" >
                    <key uid="modelSeries" />
                </out>
            </service>

            <!-- Extract model called "Skin" in the model series -->
            <service uid="extractSkinSrv" type="::ctrlCamp::SExtractMeshByType" >
               <inout key="source" uid="modelSeries" >
                   <extract type="Skin" />
               </inout>
               <out group="target" >
                   <key uid="mesh" />
               </out>
            </service>

            <!-- Extract RGB instrinsic Depth intrinsic and Extrinsic matrices from a::arData::CameraSeries -->
            <service uid="extractCameraSrv" type="::ctrlCamp::SExtractObj" >
                <!-- Source -->
                <inout key="source" uid="RGBDCameraSeries" >
                    <extract from="@cameras.0" /> <!-- Camp path of the first camera in cameraSeries (Depth) -->
                    <extract from="@cameras.1" /> <!-- Camp path of the second camera in cameraSeries (RGB) -->
                    <extract from="@extrinsic_matrices.1" /> <!-- Camp path of the extrincis matrix in cameraSeries going from Depth to RGB coordinate system -->
                </inout>
                <!-- Destination -->
                <out group="target" >
                    <key uid="Dcamera" />
                    <key uid="RGBcamera" />
                    <key uid="extrinsic" />
                </out>
            </service>

            <!-- Use the extrinsic matrix to get back in the RGB space -->
            <service uid="concatenateSrv" type="::maths::SConcatenateMatrices" >
                <in group="matrix" >
                    <key uid="registrationMatrix" autoConnect="yes" inverse="true" />
                    <key uid="extrinsic" autoConnect="yes" inverse="true" />
                </in>
                <inout key="output" uid="inverseMatrix" />
            </service>

            <!-- To extract the foreground image to display on top of meshes -->
            <service uid="maskerSrv" type="::depthSegmentation::SDepthImageMasking" worker="masker" >
                <in key="maskImage" uid="offscreenImage" />
                <in key="videoImage" uid="videoImage" />
                <in key="depthImage" uid="depthImage" autoConnect="yes" />
                <inout key="foregroundImage" uid="foregroundImage" />
            </service>

            <!-- ******************************* Connections ***************************************** -->

            <connect>
                <signal>videoSelectorSrv/configuredFile</signal>
                <signal>videoSelectorSrv/configuredStream</signal>
                <signal>videoSelectorSrv/configuredDevice</signal>
                <slot>startVideoAct/update</slot>
            </connect>

            <connect>
                <signal>videoGrabberSrv/cameraStarted</signal>
                <slot>pauseVideoAct/show</slot>
                <slot>startVideoAct/hide</slot>
                <slot>stopVideoAct/setExecutable</slot>
                <slot>loopVideoAct/setExecutable</slot>
            </connect>

            <connect>
                <signal>RGBCamera/idModified</signal>
                <slot>videoGrabberSrv/stopCamera</slot>
            </connect>

            <connect>
                <signal>RGBCamera/modified</signal>
                <slot>startVideoAct/setExecutable</slot>
                <slot>stopVideoAct/update</slot>
            </connect>

            <connect>
                <signal>seriesDB/modified</signal>
                <signal>seriesDB/addedSeries</signal>
                <slot>extractModelSeriesSrv/update</slot>
            </connect>

            <connect>
                <signal>cameraSeries/addedCamera</signal>
                <slot>extractCameraSrv/update</slot>
            </connect>

            <connect>
                 <signal>enableHoleFillingFilterParamSrv/boolChanged</signal>
                 <slot>videoGrabberSrv/setBoolParameter</slot>
            </connect>

            <connect>
                 <signal>maskerThresholdParamSrv/intChanged</signal>
                 <slot>maskerSrv/setThreshold</slot>
            </connect>

            <!-- ******************************* Start services ***************************************** -->

            <start uid="mainFrame" />
            <start uid="organManagerAct" />
            <start uid="frameUpdaterSrv" />
            <start uid="videoGrabberSrv" />
            <start uid="extractCameraSrv" />
            <start uid="transformReaderSrv" />
            <start uid="maskerSrv" />
            <start uid="meshReaderSrv" />
            <start uid="extractModelSeriesSrv" />
            <start uid="extractSkinSrv" />
            <start uid="concatenateSrv" />
            <start uid="genericSceneSrv" />
            <start uid="videoAdp" />
            <start uid="videoARAdp" />
            <start uid="cameraAdp" />
            <start uid="meshAdp" />
            <start uid="offscreenSceneSrv" />
            <start uid="meshOffscreenAdp" />
            <start uid="cameraOffscreenAdp" />

            <!-- ******************************* Update services ***************************************** -->

            <update uid="extractSkinSrv" />
            <update uid="extractCameraSrv" />
            <update uid="concatenateSrv" />
            <update uid="enableHoleFillingFilterParamSrv" />
            <update uid="meshAdp" />

        </config>
    </extension>
</plugin>
