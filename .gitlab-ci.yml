stages:
  - lint
  - build
  - test
  - doc
  - deploy

.linux_template: &linux_job
  image: "${SIGHT_CI_MINT19}:dev"
  before_script:
    - sudo ln -sfnv /usr/local/cuda-10.1 /usr/local/cuda
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_COMPILERCHECK=content
    - export CCACHE_MAXSIZE=32G
    - export CCACHE_COMPRESS=1
    - export CCACHE_SLOPPINESS=include_file_ctime,pch_defines,time_macros,file_macro,system_headers
    - export CCACHE_NOHASHDIR=1
    - export CCACHE_DIR=/cache/ccache
    - conan config set storage.path=/cache/conan-cache/data
    - export CC=/usr/local/lib/ccache/gcc-8
    - export CXX=/usr/local/lib/ccache/g++-8
    - mkdir -p $CI_PROJECT_DIR/install $CI_PROJECT_DIR/build
    - sudo chown -R sight:sight .
    # Reset the time of all files to improve the use of ccache.
    - /usr/lib/git-core/git-restore-mtime --force --skip-missing --commit-time
    # Merge the branch into dev.
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        git config user.name ${GITLAB_USER_ID}
        git config user.email ${GITLAB_USER_EMAIL}
        git fetch --all
        git checkout dev
        git reset --hard origin/dev
        git merge "origin/"${CI_COMMIT_REF_NAME} --no-commit --no-ff
        export EXTRA_BRANCH="dev"
      else
        export EXTRA_BRANCH="${CI_COMMIT_REF_NAME}"
      fi

.windows_template: &windows_job
  variables:
    CONAN_USER_HOME: $CI_PROJECT_DIR/conan
    CUDA_PATH: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1"
  before_script:
    # CMerge the branch into dev.
    - set EXTRA_BRANCH=%CI_COMMIT_REF_NAME%
    - >            
      if "%CI_COMMIT_REF_NAME%" NEQ "dev" (
        if "%CI_COMMIT_REF_NAME%" NEQ "master" (
          if "%CI_COMMIT_TAG%" EQU "" (
            git config user.name ${GITLAB_USER_ID}
            git config user.email ${GITLAB_USER_EMAIL}
            git fetch --all
            git checkout dev
            git reset --hard origin/dev
            git merge "origin/"%CI_COMMIT_REF_NAME% --no-commit --no-ff
            set EXTRA_BRANCH=dev
          )
        )
      )
    # Configure the build.
    - conan config set storage.path="C:\cache\conan"
    - if not exist "%CI_PROJECT_DIR%/install" md "%CI_PROJECT_DIR%/install"
    - if not exist "%CI_PROJECT_DIR%/build" md "%CI_PROJECT_DIR%/build"
    - call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
    - chcp 1252
  tags:
    - shell
    - windows

sheldon:
  <<: *linux_job
  stage: lint
  dependencies: []
  script:
    # Download sheldon.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-git.git -b dev
    # Stage all files from the merge to get them checked by sheldon.
    - git add * -f
    - git reset sight-git
    # Display modified files.
    - git status
    # Run sheldon on the merge result.
    - sight-git/hooks/sheldon
  except:
    - dev
    - master
    - tags

build:debug-linux-clang:
  <<: *linux_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - cd $CI_PROJECT_DIR/build/
    - export CC=/usr/local/lib/ccache/clang-8
    - export CXX=/usr/local/lib/ccache/clang++-8
    - ccache -s
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=Debug
      -DBUILD_TESTS=ON
      -DBUILD_DOCUMENTATION=OFF
      -DSPYLOG_LEVEL=trace
      -DENABLE_PCH=OFF
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    - ccache -s
    # Run unit tests.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-data.git -b ${EXTRA_BRANCH}
    - export FWTEST_DATA_DIR=$CI_PROJECT_DIR/build/sight-data
    - ctest --timeout 480 --output-on-failure -O ctest.log -j4
  artifacts:
    when: always
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - $CI_PROJECT_DIR/build/ctest.log

build:debug-windows:
  <<: *windows_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - cd "%CI_PROJECT_DIR%/build"
    - >
      cmake %CI_PROJECT_DIR%
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=%CI_PROJECT_DIR%/install
      -DCMAKE_BUILD_TYPE=Debug
      -DBUILD_TESTS=ON
      -DBUILD_DOCUMENTATION=OFF
      -DSPYLOG_LEVEL=trace
      -DENABLE_PCH=ON
    - ninja
    # Run unit tests.
    - git clone --depth 1 https://gitlab-ci-token:%CI_JOB_TOKEN%@git.ircad.fr/Sight/sight-data.git -b "%EXTRA_BRANCH%"
    - set FWTEST_DATA_DIR=%CI_PROJECT_DIR%\build\sight-data
    - ctest --timeout 480 --output-on-failure -O ctest.log -E fwRenderOgreTest -j4
  artifacts:
    when: always
    name: "%CI_JOB_NAME%-%CI_COMMIT_REF_SLUG%"
    paths:
      - build/ctest.log
      - build/fwTest.log

build:release-windows:
  <<: *windows_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - cd "%CI_PROJECT_DIR%/build"
    - >
      cmake %CI_PROJECT_DIR%
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=%CI_PROJECT_DIR%/install
      -DCMAKE_BUILD_TYPE=Release
      -DBUILD_TESTS=ON
      -DBUILD_DOCUMENTATION=OFF
      -DENABLE_PCH=ON
    - ninja
    # Run unit tests.
    - git clone --depth 1 https://gitlab-ci-token:%CI_JOB_TOKEN%@git.ircad.fr/Sight/sight-data.git -b %EXTRA_BRANCH%
    - set FWTEST_DATA_DIR=%CI_PROJECT_DIR%\build\sight-data
    - ctest --timeout 480 --output-on-failure -O ctest.log -E fwRenderOgreTest -j4
  artifacts:
    when: always
    name: "%CI_JOB_NAME%-%CI_COMMIT_REF_SLUG%"
    paths:
      - build/ctest.log
      - build/fwTest.log

build:debian:
  image: registry.ircad.fr/sight/docker-debian:dev
  stage: build
  dependencies: []
  before_script:
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_COMPILERCHECK=content
    - export CCACHE_MAXSIZE=32G
    - export CCACHE_COMPRESS=1
    - export CCACHE_SLOPPINESS=include_file_ctime,pch_defines,time_macros,file_macro,system_headers
    - export CCACHE_NOHASHDIR=1
    - export CCACHE_DIR=/cache/ccache
    - export CC=/usr/lib/ccache/gcc-9
    - export CXX=/usr/lib/ccache/g++-9
    - mkdir -p $CI_PROJECT_DIR/install $CI_PROJECT_DIR/build
    # Merge the branch into dev.
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        git config user.name ${GITLAB_USER_ID}
        git config user.email ${GITLAB_USER_EMAIL}
        git fetch --all
        git checkout dev
        git reset --hard origin/dev
        git merge "origin/"${CI_COMMIT_REF_NAME} --no-commit --no-ff
      fi
    - /usr/lib/git-core/git-restore-mtime --force --skip-missing --commit-time
  script:
    # Build the project on the merge result.
    - cd $CI_PROJECT_DIR/build/
    - ccache -s
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=Release
      -DBUILD_TESTS=OFF
      -DBUILD_DOCUMENTATION=OFF
      -DENABLE_PCH=OFF
      -DUSE_SYSTEM_LIB=ON
      -DPROJECTS_TO_BUILD=VRRender
    - ninja
    - ccache -s

doxygen:
  <<: *linux_job
  stage: doc
  dependencies: []
  script:
    # Generate the dox on the merge result.
    - cd $CI_PROJECT_DIR/build/
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=Release
      -DBUILD_TESTS=OFF
      -DBUILD_DOCUMENTATION=ON
    - ninja doc
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - $CI_PROJECT_DIR/build/Documentation/Doxygen/

pages:
  image: "${SIGHT_CI_MINT19}:dev"
  stage: deploy
  dependencies:
    - doxygen
  script:
    - mv build/Documentation/Doxygen/html/ public/
  artifacts:
    paths:
      - public
  only:
    - dev

build:sdk-debug-linux:
  <<: *linux_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - mkdir -p $CI_PROJECT_DIR/sdk
    - rm -rf $CI_PROJECT_DIR/sdk/* $CI_PROJECT_DIR/build/* $CI_PROJECT_DIR/install/*
    - cd $CI_PROJECT_DIR/build/
    - ccache -s
    # PCH are disabled because they don't work with ccache.
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=Debug
      -DBUILD_TESTS=ON
      -DBUILD_DOCUMENTATION=OFF
      -DENABLE_PCH=OFF
      -DBUILD_SDK=ON
      -DSPYLOG_LEVEL=trace
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    # Run unit tests.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-data.git -b ${EXTRA_BRANCH}
    - export FWTEST_DATA_DIR=$CI_PROJECT_DIR/build/sight-data
    - ctest --timeout 480 --output-on-failure -O ctest.log -j4
    # Install and build the SDK package
    - ninja install
    - ninja package
    - ccache -s
    # Retrieve package name and store it as environment files since inherited environment variable is experimental
    # and need to explicitly enabled (https://docs.gitlab.com/ee/ci/variables/#enable-inherited-environment-variables-core-only)
    - export SDK_FILE_PATH=$(find $CI_PROJECT_DIR/build -maxdepth 1 -iname '*.tar.gz' -type f -print -quit)
    - export SDK_NAME=$(basename -s .tar.gz ${SDK_FILE_PATH})
    - mv ${SDK_FILE_PATH} $CI_PROJECT_DIR/sdk/sdk.tar.gz
    - echo "export SDK_NAME=${SDK_NAME}" > $CI_PROJECT_DIR/sdk/SDK_NAME.env
    - cat $CI_PROJECT_DIR/sdk/SDK_NAME.env
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SDK"
    paths:
      - $CI_PROJECT_DIR/sdk/SDK_NAME.env
      - $CI_PROJECT_DIR/sdk/sdk.tar.gz
      - $CI_PROJECT_DIR/build/ctest.log
    when: always

build:sdk-release-linux:
  <<: *linux_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - mkdir -p $CI_PROJECT_DIR/sdk
    - rm -rf $CI_PROJECT_DIR/sdk/* $CI_PROJECT_DIR/build/* $CI_PROJECT_DIR/install/*
    - cd $CI_PROJECT_DIR/build/
    - ccache -s
    # PCH are disabled because they don't work with ccache.
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=Release
      -DBUILD_TESTS=ON
      -DBUILD_DOCUMENTATION=OFF
      -DENABLE_PCH=OFF
      -DBUILD_SDK=ON
      -DSPYLOG_LEVEL=error
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    # Run unit tests.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-data.git -b ${EXTRA_BRANCH}
    - export FWTEST_DATA_DIR=$CI_PROJECT_DIR/build/sight-data
    - ctest --timeout 480 --output-on-failure -O ctest.log -j4
    # Install and build the SDK package
    - ninja install
    - ninja package
    - ccache -s
    # Retrieve package name and store it as environment files since inherited environment variable is experimental
    # and need to explicitly enabled (https://docs.gitlab.com/ee/ci/variables/#enable-inherited-environment-variables-core-only)
    - export SDK_FILE_PATH=$(find $CI_PROJECT_DIR/build -maxdepth 1 -iname '*.tar.gz' -type f -print -quit)
    - export SDK_NAME=$(basename -s .tar.gz ${SDK_FILE_PATH})
    - mv ${SDK_FILE_PATH} $CI_PROJECT_DIR/sdk/sdk.tar.gz
    - echo "export SDK_NAME=${SDK_NAME}" > $CI_PROJECT_DIR/sdk/SDK_NAME.env
    - cat $CI_PROJECT_DIR/sdk/SDK_NAME.env
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SDK"
    paths:
      - $CI_PROJECT_DIR/sdk/SDK_NAME.env
      - $CI_PROJECT_DIR/sdk/sdk.tar.gz
      - $CI_PROJECT_DIR/build/ctest.log
    when: always

test:sdk-debug-linux:
  <<: *linux_job
  stage: test
  dependencies:
    - build:sdk-debug-linux
  script:
    # Uncompress the sdk.
    - source $CI_PROJECT_DIR/sdk/SDK_NAME.env
    - cd $CI_PROJECT_DIR/sdk
    - tar xvfa $CI_PROJECT_DIR/sdk/sdk.tar.gz
    - find . -type f -iname '*' -exec touch -t 197001010000 {} \;
    # Clean garbage from previous stage
    - rm -rf $CI_PROJECT_DIR/build/* $CI_PROJECT_DIR/install/*
    # Checkout
    - cd $CI_PROJECT_DIR/build
    - git clone --depth 1 https://gitlab-ci-token:%CI_JOB_TOKEN%@git.ircad.fr/sight/sight-sdk-sample.git -b ${EXTRA_BRANCH}
    # Reset the time of all files to improve the use of ccache.
    - cd $CI_PROJECT_DIR/build/sight-sdk-sample
    - /usr/lib/git-core/git-restore-mtime --force --skip-missing --commit-time
    - mkdir -p $CI_PROJECT_DIR/build/sight-sdk-sample-build
    - cd $CI_PROJECT_DIR/build/sight-sdk-sample-build
    - ccache -s
    # PCH are disabled because they don't work with ccache.
    - >
      cmake $CI_PROJECT_DIR/build/sight-sdk-sample
      -DSight_DIR=$CI_PROJECT_DIR/sdk/${SDK_NAME}/lib/cmake/sight
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=Debug
      -DENABLE_PCH=OFF
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    - ccache -s
    # Launch tutosdk in background, wait 5s, and terminate it
    - xvfb-run -a ./bin/tutosdk &
    - sleep 5s
    - killall -r "fwlauncher.*"
    # Launch sight-sdk-sample
    - LD_LIBRARY_PATH=$CI_PROJECT_DIR/sdk/${SDK_NAME}/lib:$CI_PROJECT_DIR/sdk/${SDK_NAME}/lib/sight:$LD_LIBRARY_PATH
    - PATH=$CI_PROJECT_DIR/sdk/${SDK_NAME}/bin:$PATH
    - ./sight-sdk-sample
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SDK"
    paths:
      - $CI_PROJECT_DIR/sdk/SDK_NAME.env
      - $CI_PROJECT_DIR/sdk/sdk.tar.gz

test:sdk-release-linux:
  <<: *linux_job
  stage: test
  dependencies:
    - build:sdk-release-linux
  script:
    # Uncompress the sdk.
    - source $CI_PROJECT_DIR/sdk/SDK_NAME.env
    - cd $CI_PROJECT_DIR/sdk
    - tar xvfa $CI_PROJECT_DIR/sdk/sdk.tar.gz
    - find . -type f -iname '*' -exec touch -t 197001010000 {} \;
    # Clean garbage from previous stage
    - rm -rf $CI_PROJECT_DIR/build/* $CI_PROJECT_DIR/install/*
    # Checkout
    - cd $CI_PROJECT_DIR/build
    - git clone --depth 1 https://gitlab-ci-token:%CI_JOB_TOKEN%@git.ircad.fr/sight/sight-sdk-sample.git -b ${EXTRA_BRANCH}
    # Reset the time of all files to improve the use of ccache.
    - cd $CI_PROJECT_DIR/build/sight-sdk-sample
    - /usr/lib/git-core/git-restore-mtime --force --skip-missing --commit-time
    - mkdir -p $CI_PROJECT_DIR/build/sight-sdk-sample-build
    - cd $CI_PROJECT_DIR/build/sight-sdk-sample-build
    - ccache -s
    # PCH are disabled because they don't work with ccache.
    - >
      cmake $CI_PROJECT_DIR/build/sight-sdk-sample
      -DSight_DIR=$CI_PROJECT_DIR/sdk/${SDK_NAME}/lib/cmake/sight
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
      -DCMAKE_BUILD_TYPE=Release
      -DENABLE_PCH=OFF
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    - ccache -s
    # Launch tutosdk in background, wait 5s, and terminate it
    - xvfb-run -a ./bin/tutosdk &
    - sleep 5s
    - killall -r "fwlauncher.*"
    # Launch sight-sdk-sample
    - LD_LIBRARY_PATH=$CI_PROJECT_DIR/sdk/${SDK_NAME}/lib:$CI_PROJECT_DIR/sdk/${SDK_NAME}/lib/sight:$LD_LIBRARY_PATH
    - PATH=$CI_PROJECT_DIR/sdk/${SDK_NAME}/bin:$PATH
    - ./sight-sdk-sample
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SDK"
    paths:
      - $CI_PROJECT_DIR/sdk/SDK_NAME.env
      - $CI_PROJECT_DIR/sdk/sdk.tar.gz

deploy:sdk-release-linux:
  <<: *linux_job
  stage: deploy
  when: manual
  dependencies:
    - test:sdk-release-linux
  script:
    - source $CI_PROJECT_DIR/sdk/SDK_NAME.env
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        export ARTIFACTORY_NAME=${SDK_NAME}
      else
        export ARTIFACTORY_NAME="sight-Release-latest-$CI_COMMIT_REF_NAME-Linux"
      fi
    - curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T $CI_PROJECT_DIR/sdk/sdk.tar.gz "https://conan.ircad.fr/artifactory/data/sdk/${ARTIFACTORY_NAME}"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SDK"
    paths:
      - $CI_PROJECT_DIR/sdk/sdk.tar.gz

deploy:sdk-debug-linux:
  <<: *linux_job
  stage: deploy
  when: manual
  dependencies:
    - test:sdk-debug-linux
  script:
    - source $CI_PROJECT_DIR/sdk/SDK_NAME.env
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        export ARTIFACTORY_NAME=${SDK_NAME}
      else
        export ARTIFACTORY_NAME="sight-Debug-latest-$CI_COMMIT_REF_NAME-Linux"
      fi
    - curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T $CI_PROJECT_DIR/sdk/sdk.tar.gz "https://conan.ircad.fr/artifactory/data/sdk/${ARTIFACTORY_NAME}"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-SDK"
    paths:
      - $CI_PROJECT_DIR/sdk/sdk.tar.gz
