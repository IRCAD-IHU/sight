stages:
  - lint
  - build
  - doc
  - deploy

.linux_template: &linux_job
  image: ${DOCKER_ENVDEV_MINT19}
  variables:
    FW_IGNORE_SLOW_TESTS: 1
  before_script:
    - sudo ln -sfnv /usr/local/cuda-10.1 /usr/local/cuda
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_COMPILERCHECK=content
    - export CCACHE_MAXSIZE=32G
    - export CCACHE_COMPRESS=1
    - export CCACHE_SLOPPINESS=include_file_ctime,pch_defines,time_macros,file_macro,system_headers
    - export CCACHE_NOHASHDIR=1
    - export CCACHE_DIR=/cache/ccache
    - conan config set storage.path=/cache/conan-cache/data
    - export CC=/usr/local/lib/ccache/gcc-8
    - export CXX=/usr/local/lib/ccache/g++-8
    - mkdir -p $CI_PROJECT_DIR/install $CI_PROJECT_DIR/build
    - sudo chown -R sight:sight .
    # Merge the branch into dev.
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        git config user.name ${GITLAB_USER_ID}
        git config user.email ${GITLAB_USER_EMAIL}
        git fetch --all
        git checkout dev
        git reset --hard origin/dev
        git merge "origin/"${CI_COMMIT_REF_NAME} --no-commit --no-ff
      fi
    # Reset the time of all files to improve the use of ccache.
    - /usr/lib/git-core/git-restore-mtime --force --skip-missing --commit-time

.windows_template: &windows_job
  variables:
    CONAN_USER_HOME: $CI_PROJECT_DIR/conan
    FW_IGNORE_SLOW_TESTS: 1
    CUDA_PATH: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1"
  before_script:
    # CMerge the branch into dev.
    - >
      if "%CI_COMMIT_REF_NAME%" NEQ "dev" (
        if "%CI_COMMIT_REF_NAME%" NEQ "master" (
          if "%CI_COMMIT_TAG%" EQU "" (
            git config user.name ${GITLAB_USER_ID}
            git config user.email ${GITLAB_USER_EMAIL}
            git fetch --all
            git checkout dev
            git reset --hard origin/dev
            git merge "origin/"%CI_COMMIT_REF_NAME% --no-commit --no-ff
          )
        )
      )
    # Configure the build.
    - conan config set storage.path="C:\cache\conan"
    - if not exist "%CI_PROJECT_DIR%/install" md "%CI_PROJECT_DIR%/install"
    - if not exist "%CI_PROJECT_DIR%/build" md "%CI_PROJECT_DIR%/build"
    - call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
    - chcp 1252
  tags:
    - shell
    - windows

sheldon:
  <<: *linux_job
  stage: lint
  dependencies: []
  script:
    # Download sheldon.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-git.git -b dev
    # Add merge result since sheldon check them.
    - git add * -f
    # Display modified files.
    - git status
    # Run sheldon on the merge result.
    - sight-git/hooks/sheldon
  except:
    - dev
    - master
    - tags

build:debug-linux:
  <<: *linux_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - cd $CI_PROJECT_DIR/build/
    - ccache -s
    # PCH are disabled because they doesn't work with ccache.
    - >
     cmake $CI_PROJECT_DIR
     -G Ninja
     -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
     -DCMAKE_BUILD_TYPE=Debug
     -DBUILD_TESTS=ON
     -DBUILD_DOCUMENTATION=OFF
     -DSPYLOG_LEVEL=trace
     -DENABLE_PCH=OFF
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    - ccache -s
    # Run tests.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-data.git -b dev sight-data-dev
    - export FWTEST_DATA_DIR=$CI_PROJECT_DIR/build/sight-data-dev
    - ctest --timeout 240 --output-on-failure -O ctest.log -j4
  artifacts:
    when: always
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - $CI_PROJECT_DIR/build/ctest.log

build:release-linux:
  <<: *linux_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - cd $CI_PROJECT_DIR/build/
    - ccache -s
    # PCH are disabled because they doesn't work with ccache.
    - >
     cmake $CI_PROJECT_DIR
     -G Ninja
     -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
     -DCMAKE_BUILD_TYPE=Release
     -DBUILD_TESTS=ON
     -DBUILD_DOCUMENTATION=OFF
     -DENABLE_PCH=OFF
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    - ninja
    - ccache -s
    # Run tests.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-data.git -b dev sight-data-dev
    - export FWTEST_DATA_DIR=$CI_PROJECT_DIR/build/sight-data-dev
    - ctest --timeout 120 --output-on-failure -O ctest.log -j4
  artifacts:
    when: always
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - $CI_PROJECT_DIR/build/ctest.log

build:debug-windows:
  <<: *windows_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - cd "%CI_PROJECT_DIR%/build"
    - >
     cmake %CI_PROJECT_DIR%
     -G Ninja
     -DCMAKE_INSTALL_PREFIX=%CI_PROJECT_DIR%/install
     -DCMAKE_BUILD_TYPE=Debug
     -DBUILD_TESTS=ON
     -DBUILD_DOCUMENTATION=OFF
     -DSPYLOG_LEVEL=trace
     -DENABLE_PCH=ON
    - ninja
    # Run tests.
    - git clone --depth 1 https://gitlab-ci-token:%CI_JOB_TOKEN%@git.ircad.fr/Sight/sight-data.git -b dev sight-data-dev
    - set FWTEST_DATA_DIR=%CI_PROJECT_DIR%\build\sight-data-dev
    - ctest --timeout 240 --output-on-failure -O ctest.log -E fwRenderOgreTest -j4
  artifacts:
    when: always
    name: "%CI_JOB_NAME%-%CI_COMMIT_REF_SLUG%"
    paths:
      - build/ctest.log
      - build/fwTest.log

build:release-windows:
  <<: *windows_job
  stage: build
  dependencies: []
  script:
    # Build the project on the merge result.
    - cd "%CI_PROJECT_DIR%/build"
    - >
     cmake %CI_PROJECT_DIR%
     -G Ninja
     -DCMAKE_INSTALL_PREFIX=%CI_PROJECT_DIR%/install
     -DCMAKE_BUILD_TYPE=Release
     -DBUILD_TESTS=ON
     -DBUILD_DOCUMENTATION=OFF
     -DENABLE_PCH=ON
    - ninja
    # Run tests.
    - git clone --depth 1 https://gitlab-ci-token:%CI_JOB_TOKEN%@git.ircad.fr/Sight/sight-data.git -b dev sight-data-dev
    - set FWTEST_DATA_DIR=%CI_PROJECT_DIR%\build\sight-data-dev
    - ctest --timeout 120 --output-on-failure -O ctest.log -E fwRenderOgreTest -j4
  artifacts:
    when: always
    name: "%CI_JOB_NAME%-%CI_COMMIT_REF_SLUG%"
    paths:
      - build/ctest.log
      - build/fwTest.log

build:debian:
  image: registry.ircad.fr/sight/docker-debian:dev
  stage: build
  dependencies: []
  before_script:
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_COMPILERCHECK=content
    - export CCACHE_MAXSIZE=32G
    - export CCACHE_COMPRESS=1
    - export CCACHE_SLOPPINESS=include_file_ctime,pch_defines,time_macros,file_macro,system_headers
    - export CCACHE_NOHASHDIR=1
    - export CCACHE_DIR=/cache/ccache
    - export CC=/usr/lib/ccache/gcc-9
    - export CXX=/usr/lib/ccache/g++-9
    - mkdir -p $CI_PROJECT_DIR/install $CI_PROJECT_DIR/build
    # Merge the branch into dev.
    - >
      if [ -z "$CI_COMMIT_TAG" ] && [ "$CI_COMMIT_REF_NAME" != "dev" ] && [ "$CI_COMMIT_REF_NAME" != "master" ]; then
        git config user.name ${GITLAB_USER_ID}
        git config user.email ${GITLAB_USER_EMAIL}
        git fetch --all
        git checkout dev
        git reset --hard origin/dev
        git merge "origin/"${CI_COMMIT_REF_NAME} --no-commit --no-ff
      fi
    - /usr/lib/git-core/git-restore-mtime --force --skip-missing --commit-time
  script:
    # Build the project on the merge result.
    - cd $CI_PROJECT_DIR/build/
    - ccache -s
    - >
     cmake $CI_PROJECT_DIR
     -G Ninja
     -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
     -DCMAKE_BUILD_TYPE=Release
     -DBUILD_TESTS=OFF
     -DBUILD_DOCUMENTATION=OFF
     -DENABLE_PCH=OFF
     -DUSE_SYSTEM_LIB=ON
     -DPROJECTS_TO_BUILD=VRRender
    - ninja
    - ccache -s

doxygen:
  <<: *linux_job
  stage: doc
  dependencies: []
  script:
    # Generate the dox on the merge result.
    - cd $CI_PROJECT_DIR/build/
    - >
     cmake $CI_PROJECT_DIR
     -G Ninja
     -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
     -DCMAKE_BUILD_TYPE=Release
     -DBUILD_TESTS=OFF
     -DBUILD_DOCUMENTATION=ON
    - ninja doc
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - $CI_PROJECT_DIR/build/Documentation/Doxygen/

pages:
  image: ${DOCKER_ENVDEV_MINT19}
  stage: deploy
  dependencies:
    - doxygen
  script:
    - mv build/Documentation/Doxygen/html/ public/
  artifacts:
    paths:
    - public
  only:
    - dev

build:sdk-release-linux:
  <<: *linux_job
  stage: build
  when : manual
  dependencies: []
  script:
    # Build the project on the merge result.
    - mkdir -p /home/sight/sdk/install /home/sight/sdk/build
    - cd /home/sight/sdk/build
    - ccache -s
    - >
     cmake $CI_PROJECT_DIR
     -G Ninja
     -DCMAKE_INSTALL_PREFIX=/home/sight/sdk/install
     -DCMAKE_BUILD_TYPE=Release
     -DBUILD_TESTS=OFF
     -DBUILD_DOCUMENTATION=OFF
     -DENABLE_PCH=OFF
     -DBUILD_SDK=ON
    - find . -type f -iname '*.?pp' -exec touch -f -a -m -t 197001010000 {} \;
    - ninja
    - ninja install
    - ninja package
    - ccache -s
    - export SDK_FILE_PATH=$(find /home/sight/sdk/build -maxdepth 1 -iname '*.tar.gz' -type f -print -quit)
    - export SDK_FILE_NAME=$(basename -s .tar.gz ${SDK_FILE_PATH}).tar.gz
    - curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T ${SDK_FILE_PATH} "https://conan.ircad.fr/artifactory/data/sdk/${SDK_FILE_NAME}"
    
build:sdk-debug-linux:
  <<: *linux_job
  stage: build
  when : manual
  dependencies: []
  script:
    # Build the project on the merge result.
    - mkdir -p /home/sight/sdk/install /home/sight/sdk/build
    - cd /home/sight/sdk/build
    - ccache -s
    - >
     cmake $CI_PROJECT_DIR
     -G Ninja
     -DCMAKE_INSTALL_PREFIX=/home/sight/sdk/install
     -DCMAKE_BUILD_TYPE=Debug
     -DBUILD_TESTS=OFF
     -DBUILD_DOCUMENTATION=OFF
     -DENABLE_PCH=OFF
     -DBUILD_SDK=ON
    - find . -type f -iname '*.?pp' -exec touch -f -a -m -t 197001010000 {} \;
    - ninja
    - ninja install
    - ninja package
    - ccache -s
    - export SDK_FILE_PATH=$(find /home/sight/sdk/build -maxdepth 1 -iname '*.tar.gz' -type f -print -quit)
    - export SDK_FILE_NAME=$(basename -s .tar.gz ${SDK_FILE_PATH}).tar.gz
    - curl -u${CONAN_USERNAME}:${CONAN_PASSWORD} -T ${SDK_FILE_PATH} "https://conan.ircad.fr/artifactory/data/sdk/${SDK_FILE_NAME}"